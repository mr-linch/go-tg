package tg

// Code generated by go-tg-gen (github.com/mr-linch/go-tg-gen). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

// GetUpdatesCall reprenesents a call to the getUpdates method.
// Use this method to receive incoming updates using long polling (wiki)
// An Array of Update objects is returned.
type GetUpdatesCall struct {
	Call[[]Update]
}

// NewGetUpdatesCall constructs a new GetUpdatesCall with required parameters.
func NewGetUpdatesCall() *GetUpdatesCall {
	return &GetUpdatesCall{
		Call[[]Update]{
			request: NewRequest("getUpdates"),
		},
	}
}

// GetUpdatesCall constructs a new GetUpdatesCall with required parameters.
func (client *Client) GetUpdates() *GetUpdatesCall {
	return callWithClient(
		client,
		NewGetUpdatesCall(),
	)
}

// Offset Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as getUpdates is called with an offset higher than its update_id. The negative offset can be specified to retrieve updates starting from -offset update from the end of the updates queue. All previous updates will forgotten.
func (call *GetUpdatesCall) Offset(offset int) *GetUpdatesCall {
	call.request.Int("offset", offset)
	return call
}

// Limit Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.
func (call *GetUpdatesCall) Limit(limit int) *GetUpdatesCall {
	call.request.Int("limit", limit)
	return call
}

// Timeout Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.
func (call *GetUpdatesCall) Timeout(timeout int) *GetUpdatesCall {
	call.request.Int("timeout", timeout)
	return call
}

// AllowedUpdates A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited_channel_post”, “callback_query”] to only receive updates of these types. See Update for a complete list of available update types. Specify an empty list to receive all update types except chat_member (default). If not specified, the previous setting will be used.Please note that this parameter doesn't affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time.
func (call *GetUpdatesCall) AllowedUpdates(allowedUpdates []string) *GetUpdatesCall {
	call.request.JSON("allowed_updates", allowedUpdates)
	return call
}

// SetWebhookCall reprenesents a call to the setWebhook method.
// Use this method to specify a URL and receive incoming updates via an outgoing webhook
// Whenever there is an update for the bot, we will send an HTTPS POST request to the specified URL, containing a JSON-serialized Update
// In case of an unsuccessful request, we will give up after a reasonable amount of attempts
// If you'd like to make sure that the webhook was set by you, you can specify secret data in the parameter secret_token
// If specified, the request will contain a header “X-Telegram-Bot-Api-Secret-Token” with the secret token as content.
type SetWebhookCall struct {
	CallNoResult
}

// NewSetWebhookCall constructs a new SetWebhookCall with required parameters.
// url - HTTPS URL to send updates to. Use an empty string to remove webhook integration
func NewSetWebhookCall(url string) *SetWebhookCall {
	return &SetWebhookCall{
		CallNoResult{
			request: NewRequest("setWebhook").
				String("url", url),
		},
	}
}

// SetWebhookCall constructs a new SetWebhookCall with required parameters.
func (client *Client) SetWebhook(url string) *SetWebhookCall {
	return callWithClient(
		client,
		NewSetWebhookCall(url),
	)
}

// URL HTTPS URL to send updates to. Use an empty string to remove webhook integration
func (call *SetWebhookCall) URL(url string) *SetWebhookCall {
	call.request.String("url", url)
	return call
}

// Certificate Upload your public key certificate so that the root certificate in use can be checked. See our self-signed guide for details.
func (call *SetWebhookCall) Certificate(certificate InputFile) *SetWebhookCall {
	call.request.JSON("certificate", certificate)
	return call
}

// IPAddress The fixed IP address which will be used to send webhook requests instead of the IP address resolved through DNS
func (call *SetWebhookCall) IPAddress(ipAddress string) *SetWebhookCall {
	call.request.String("ip_address", ipAddress)
	return call
}

// MaxConnections The maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery, 1-100. Defaults to 40. Use lower values to limit the load on your bot's server, and higher values to increase your bot's throughput.
func (call *SetWebhookCall) MaxConnections(maxConnections int) *SetWebhookCall {
	call.request.Int("max_connections", maxConnections)
	return call
}

// AllowedUpdates A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited_channel_post”, “callback_query”] to only receive updates of these types. See Update for a complete list of available update types. Specify an empty list to receive all update types except chat_member (default). If not specified, the previous setting will be used.Please note that this parameter doesn't affect updates created before the call to the setWebhook, so unwanted updates may be received for a short period of time.
func (call *SetWebhookCall) AllowedUpdates(allowedUpdates []string) *SetWebhookCall {
	call.request.JSON("allowed_updates", allowedUpdates)
	return call
}

// DropPendingUpdates Pass True to drop all pending updates
func (call *SetWebhookCall) DropPendingUpdates(dropPendingUpdates bool) *SetWebhookCall {
	call.request.Bool("drop_pending_updates", dropPendingUpdates)
	return call
}

// SecretToken A secret token to be sent in a header “X-Telegram-Bot-Api-Secret-Token” in every webhook request, 1-256 characters. Only characters A-Z, a-z, 0-9, _ and - are allowed. The header is useful to ensure that the request comes from a webhook set by you.
func (call *SetWebhookCall) SecretToken(secretToken string) *SetWebhookCall {
	call.request.String("secret_token", secretToken)
	return call
}

// DeleteWebhookCall reprenesents a call to the deleteWebhook method.
// Use this method to remove webhook integration if you decide to switch back to getUpdates
type DeleteWebhookCall struct {
	CallNoResult
}

// NewDeleteWebhookCall constructs a new DeleteWebhookCall with required parameters.
func NewDeleteWebhookCall() *DeleteWebhookCall {
	return &DeleteWebhookCall{
		CallNoResult{
			request: NewRequest("deleteWebhook"),
		},
	}
}

// DeleteWebhookCall constructs a new DeleteWebhookCall with required parameters.
func (client *Client) DeleteWebhook() *DeleteWebhookCall {
	return callWithClient(
		client,
		NewDeleteWebhookCall(),
	)
}

// DropPendingUpdates Pass True to drop all pending updates
func (call *DeleteWebhookCall) DropPendingUpdates(dropPendingUpdates bool) *DeleteWebhookCall {
	call.request.Bool("drop_pending_updates", dropPendingUpdates)
	return call
}

// GetWebhookInfoCall reprenesents a call to the getWebhookInfo method.
// Use this method to get current webhook status
// Requires no parameters
// On success, returns a WebhookInfo object
// If the bot is using getUpdates, will return an object with the url field empty.
type GetWebhookInfoCall struct {
	Call[WebhookInfo]
}

// NewGetWebhookInfoCall constructs a new GetWebhookInfoCall with required parameters.
func NewGetWebhookInfoCall() *GetWebhookInfoCall {
	return &GetWebhookInfoCall{
		Call[WebhookInfo]{
			request: NewRequest("getWebhookInfo"),
		},
	}
}

// GetWebhookInfoCall constructs a new GetWebhookInfoCall with required parameters.
func (client *Client) GetWebhookInfo() *GetWebhookInfoCall {
	return callWithClient(
		client,
		NewGetWebhookInfoCall(),
	)
}

// GetMeCall reprenesents a call to the getMe method.
// A simple method for testing your bot's authentication token
// Requires no parameters
// Returns basic information about the bot in form of a User object.
type GetMeCall struct {
	Call[User]
}

// NewGetMeCall constructs a new GetMeCall with required parameters.
func NewGetMeCall() *GetMeCall {
	return &GetMeCall{
		Call[User]{
			request: NewRequest("getMe"),
		},
	}
}

// GetMeCall constructs a new GetMeCall with required parameters.
func (client *Client) GetMe() *GetMeCall {
	return callWithClient(
		client,
		NewGetMeCall(),
	)
}

// LogOutCall reprenesents a call to the logOut method.
// Use this method to log out from the cloud Bot API server before launching the bot locally
// You must log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates
// After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes
// Requires no parameters.
type LogOutCall struct {
	CallNoResult
}

// NewLogOutCall constructs a new LogOutCall with required parameters.
func NewLogOutCall() *LogOutCall {
	return &LogOutCall{
		CallNoResult{
			request: NewRequest("logOut"),
		},
	}
}

// LogOutCall constructs a new LogOutCall with required parameters.
func (client *Client) LogOut() *LogOutCall {
	return callWithClient(
		client,
		NewLogOutCall(),
	)
}

// CloseCall reprenesents a call to the close method.
// Use this method to close the bot instance before moving it from one local server to another
// You need to delete the webhook before calling this method to ensure that the bot isn't launched again after server restart
// The method will return error 429 in the first 10 minutes after the bot is launched
// Requires no parameters.
type CloseCall struct {
	CallNoResult
}

// NewCloseCall constructs a new CloseCall with required parameters.
func NewCloseCall() *CloseCall {
	return &CloseCall{
		CallNoResult{
			request: NewRequest("close"),
		},
	}
}

// CloseCall constructs a new CloseCall with required parameters.
func (client *Client) Close() *CloseCall {
	return callWithClient(
		client,
		NewCloseCall(),
	)
}

// SendMessageCall reprenesents a call to the sendMessage method.
// Use this method to send text messages
// On success, the sent Message is returned.
type SendMessageCall struct {
	Call[Message]
}

// NewSendMessageCall constructs a new SendMessageCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// text - Text of the message to be sent, 1-4096 characters after entities parsing
func NewSendMessageCall(chatID PeerID, text string) *SendMessageCall {
	return &SendMessageCall{
		Call[Message]{
			request: NewRequest("sendMessage").
				PeerID("chat_id", chatID).
				String("text", text),
		},
	}
}

// SendMessageCall constructs a new SendMessageCall with required parameters.
func (client *Client) SendMessage(chatID PeerID, text string) *SendMessageCall {
	return callWithClient(
		client,
		NewSendMessageCall(chatID, text),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *SendMessageCall) ChatID(chatID PeerID) *SendMessageCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// Text Text of the message to be sent, 1-4096 characters after entities parsing
func (call *SendMessageCall) Text(text string) *SendMessageCall {
	call.request.String("text", text)
	return call
}

// ParseMode Mode for parsing entities in the message text. See formatting options for more details.
func (call *SendMessageCall) ParseMode(parseMode ParseMode) *SendMessageCall {
	call.request.Stringer("parse_mode", parseMode)
	return call
}

// Entities A JSON-serialized list of special entities that appear in message text, which can be specified instead of parse_mode
func (call *SendMessageCall) Entities(entities []MessageEntity) *SendMessageCall {
	call.request.JSON("entities", entities)
	return call
}

// DisableWebPagePreview Disables link previews for links in this message
func (call *SendMessageCall) DisableWebPagePreview(disableWebPagePreview bool) *SendMessageCall {
	call.request.Bool("disable_web_page_preview", disableWebPagePreview)
	return call
}

// DisableNotification Sends the message silently. Users will receive a notification with no sound.
func (call *SendMessageCall) DisableNotification(disableNotification bool) *SendMessageCall {
	call.request.Bool("disable_notification", disableNotification)
	return call
}

// ProtectContent Protects the contents of the sent message from forwarding and saving
func (call *SendMessageCall) ProtectContent(protectContent bool) *SendMessageCall {
	call.request.Bool("protect_content", protectContent)
	return call
}

// ReplyToMessageID If the message is a reply, ID of the original message
func (call *SendMessageCall) ReplyToMessageID(replyToMessageID int) *SendMessageCall {
	call.request.Int("reply_to_message_id", replyToMessageID)
	return call
}

// AllowSendingWithoutReply Pass True, if the message should be sent even if the specified replied-to message is not found
func (call *SendMessageCall) AllowSendingWithoutReply(allowSendingWithoutReply bool) *SendMessageCall {
	call.request.Bool("allow_sending_without_reply", allowSendingWithoutReply)
	return call
}

// ReplyMarkup Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
func (call *SendMessageCall) ReplyMarkup(replyMarkup ReplyMarkup) *SendMessageCall {
	call.request.JSON("reply_markup", replyMarkup)
	return call
}

// ForwardMessageCall reprenesents a call to the forwardMessage method.
// Use this method to forward messages of any kind
// Service messages can't be forwarded
// On success, the sent Message is returned.
type ForwardMessageCall struct {
	Call[Message]
}

// NewForwardMessageCall constructs a new ForwardMessageCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// fromChatID - Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername)
// messageID - Message identifier in the chat specified in from_chat_id
func NewForwardMessageCall(chatID PeerID, fromChatID PeerID, messageID int) *ForwardMessageCall {
	return &ForwardMessageCall{
		Call[Message]{
			request: NewRequest("forwardMessage").
				PeerID("chat_id", chatID).
				PeerID("from_chat_id", fromChatID).
				Int("message_id", messageID),
		},
	}
}

// ForwardMessageCall constructs a new ForwardMessageCall with required parameters.
func (client *Client) ForwardMessage(chatID PeerID, fromChatID PeerID, messageID int) *ForwardMessageCall {
	return callWithClient(
		client,
		NewForwardMessageCall(chatID, fromChatID, messageID),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *ForwardMessageCall) ChatID(chatID PeerID) *ForwardMessageCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// FromChatID Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername)
func (call *ForwardMessageCall) FromChatID(fromChatID PeerID) *ForwardMessageCall {
	call.request.PeerID("from_chat_id", fromChatID)
	return call
}

// DisableNotification Sends the message silently. Users will receive a notification with no sound.
func (call *ForwardMessageCall) DisableNotification(disableNotification bool) *ForwardMessageCall {
	call.request.Bool("disable_notification", disableNotification)
	return call
}

// ProtectContent Protects the contents of the forwarded message from forwarding and saving
func (call *ForwardMessageCall) ProtectContent(protectContent bool) *ForwardMessageCall {
	call.request.Bool("protect_content", protectContent)
	return call
}

// MessageID Message identifier in the chat specified in from_chat_id
func (call *ForwardMessageCall) MessageID(messageID int) *ForwardMessageCall {
	call.request.Int("message_id", messageID)
	return call
}

// CopyMessageCall reprenesents a call to the copyMessage method.
// Use this method to copy messages of any kind
// Service messages and invoice messages can't be copied
// The method is analogous to the method forwardMessage, but the copied message doesn't have a link to the original message
// Returns the MessageId of the sent message on success.
type CopyMessageCall struct {
	Call[MessageId]
}

// NewCopyMessageCall constructs a new CopyMessageCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// fromChatID - Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername)
// messageID - Message identifier in the chat specified in from_chat_id
func NewCopyMessageCall(chatID PeerID, fromChatID PeerID, messageID int) *CopyMessageCall {
	return &CopyMessageCall{
		Call[MessageId]{
			request: NewRequest("copyMessage").
				PeerID("chat_id", chatID).
				PeerID("from_chat_id", fromChatID).
				Int("message_id", messageID),
		},
	}
}

// CopyMessageCall constructs a new CopyMessageCall with required parameters.
func (client *Client) CopyMessage(chatID PeerID, fromChatID PeerID, messageID int) *CopyMessageCall {
	return callWithClient(
		client,
		NewCopyMessageCall(chatID, fromChatID, messageID),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *CopyMessageCall) ChatID(chatID PeerID) *CopyMessageCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// FromChatID Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername)
func (call *CopyMessageCall) FromChatID(fromChatID PeerID) *CopyMessageCall {
	call.request.PeerID("from_chat_id", fromChatID)
	return call
}

// MessageID Message identifier in the chat specified in from_chat_id
func (call *CopyMessageCall) MessageID(messageID int) *CopyMessageCall {
	call.request.Int("message_id", messageID)
	return call
}

// Caption New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept
func (call *CopyMessageCall) Caption(caption string) *CopyMessageCall {
	call.request.String("caption", caption)
	return call
}

// ParseMode Mode for parsing entities in the new caption. See formatting options for more details.
func (call *CopyMessageCall) ParseMode(parseMode ParseMode) *CopyMessageCall {
	call.request.Stringer("parse_mode", parseMode)
	return call
}

// CaptionEntities A JSON-serialized list of special entities that appear in the new caption, which can be specified instead of parse_mode
func (call *CopyMessageCall) CaptionEntities(captionEntities []MessageEntity) *CopyMessageCall {
	call.request.JSON("caption_entities", captionEntities)
	return call
}

// DisableNotification Sends the message silently. Users will receive a notification with no sound.
func (call *CopyMessageCall) DisableNotification(disableNotification bool) *CopyMessageCall {
	call.request.Bool("disable_notification", disableNotification)
	return call
}

// ProtectContent Protects the contents of the sent message from forwarding and saving
func (call *CopyMessageCall) ProtectContent(protectContent bool) *CopyMessageCall {
	call.request.Bool("protect_content", protectContent)
	return call
}

// ReplyToMessageID If the message is a reply, ID of the original message
func (call *CopyMessageCall) ReplyToMessageID(replyToMessageID int) *CopyMessageCall {
	call.request.Int("reply_to_message_id", replyToMessageID)
	return call
}

// AllowSendingWithoutReply Pass True, if the message should be sent even if the specified replied-to message is not found
func (call *CopyMessageCall) AllowSendingWithoutReply(allowSendingWithoutReply bool) *CopyMessageCall {
	call.request.Bool("allow_sending_without_reply", allowSendingWithoutReply)
	return call
}

// ReplyMarkup Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
func (call *CopyMessageCall) ReplyMarkup(replyMarkup ReplyMarkup) *CopyMessageCall {
	call.request.JSON("reply_markup", replyMarkup)
	return call
}

// SendPhotoCall reprenesents a call to the sendPhoto method.
// Use this method to send photos
// On success, the sent Message is returned.
type SendPhotoCall struct {
	Call[Message]
}

// NewSendPhotoCall constructs a new SendPhotoCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// photo - Photo to send. Pass a file_id as String to send a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or upload a new photo using multipart/form-data. The photo must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20. More information on Sending Files »
func NewSendPhotoCall(chatID PeerID, photo FileArg) *SendPhotoCall {
	return &SendPhotoCall{
		Call[Message]{
			request: NewRequest("sendPhoto").
				PeerID("chat_id", chatID).
				File("photo", photo),
		},
	}
}

// SendPhotoCall constructs a new SendPhotoCall with required parameters.
func (client *Client) SendPhoto(chatID PeerID, photo FileArg) *SendPhotoCall {
	return callWithClient(
		client,
		NewSendPhotoCall(chatID, photo),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *SendPhotoCall) ChatID(chatID PeerID) *SendPhotoCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// Photo Photo to send. Pass a file_id as String to send a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or upload a new photo using multipart/form-data. The photo must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20. More information on Sending Files »
func (call *SendPhotoCall) Photo(photo FileArg) *SendPhotoCall {
	call.request.File("photo", photo)
	return call
}

// Caption Photo caption (may also be used when resending photos by file_id), 0-1024 characters after entities parsing
func (call *SendPhotoCall) Caption(caption string) *SendPhotoCall {
	call.request.String("caption", caption)
	return call
}

// ParseMode Mode for parsing entities in the photo caption. See formatting options for more details.
func (call *SendPhotoCall) ParseMode(parseMode ParseMode) *SendPhotoCall {
	call.request.Stringer("parse_mode", parseMode)
	return call
}

// CaptionEntities A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode
func (call *SendPhotoCall) CaptionEntities(captionEntities []MessageEntity) *SendPhotoCall {
	call.request.JSON("caption_entities", captionEntities)
	return call
}

// DisableNotification Sends the message silently. Users will receive a notification with no sound.
func (call *SendPhotoCall) DisableNotification(disableNotification bool) *SendPhotoCall {
	call.request.Bool("disable_notification", disableNotification)
	return call
}

// ProtectContent Protects the contents of the sent message from forwarding and saving
func (call *SendPhotoCall) ProtectContent(protectContent bool) *SendPhotoCall {
	call.request.Bool("protect_content", protectContent)
	return call
}

// ReplyToMessageID If the message is a reply, ID of the original message
func (call *SendPhotoCall) ReplyToMessageID(replyToMessageID int) *SendPhotoCall {
	call.request.Int("reply_to_message_id", replyToMessageID)
	return call
}

// AllowSendingWithoutReply Pass True, if the message should be sent even if the specified replied-to message is not found
func (call *SendPhotoCall) AllowSendingWithoutReply(allowSendingWithoutReply bool) *SendPhotoCall {
	call.request.Bool("allow_sending_without_reply", allowSendingWithoutReply)
	return call
}

// ReplyMarkup Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
func (call *SendPhotoCall) ReplyMarkup(replyMarkup ReplyMarkup) *SendPhotoCall {
	call.request.JSON("reply_markup", replyMarkup)
	return call
}

// SendAudioCall reprenesents a call to the sendAudio method.
// Use this method to send audio files, if you want Telegram clients to display them in the music player
// Your audio must be in the .MP3 or .M4A format
// On success, the sent Message is returned
// Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.
// For sending voice messages, use the sendVoice method instead.
type SendAudioCall struct {
	Call[Message]
}

// NewSendAudioCall constructs a new SendAudioCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// audio - Audio file to send. Pass a file_id as String to send an audio file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an audio file from the Internet, or upload a new one using multipart/form-data. More information on Sending Files »
func NewSendAudioCall(chatID PeerID, audio FileArg) *SendAudioCall {
	return &SendAudioCall{
		Call[Message]{
			request: NewRequest("sendAudio").
				PeerID("chat_id", chatID).
				File("audio", audio),
		},
	}
}

// SendAudioCall constructs a new SendAudioCall with required parameters.
func (client *Client) SendAudio(chatID PeerID, audio FileArg) *SendAudioCall {
	return callWithClient(
		client,
		NewSendAudioCall(chatID, audio),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *SendAudioCall) ChatID(chatID PeerID) *SendAudioCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// Audio Audio file to send. Pass a file_id as String to send an audio file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an audio file from the Internet, or upload a new one using multipart/form-data. More information on Sending Files »
func (call *SendAudioCall) Audio(audio FileArg) *SendAudioCall {
	call.request.File("audio", audio)
	return call
}

// Caption Audio caption, 0-1024 characters after entities parsing
func (call *SendAudioCall) Caption(caption string) *SendAudioCall {
	call.request.String("caption", caption)
	return call
}

// ParseMode Mode for parsing entities in the audio caption. See formatting options for more details.
func (call *SendAudioCall) ParseMode(parseMode ParseMode) *SendAudioCall {
	call.request.Stringer("parse_mode", parseMode)
	return call
}

// CaptionEntities A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode
func (call *SendAudioCall) CaptionEntities(captionEntities []MessageEntity) *SendAudioCall {
	call.request.JSON("caption_entities", captionEntities)
	return call
}

// Duration Duration of the audio in seconds
func (call *SendAudioCall) Duration(duration int) *SendAudioCall {
	call.request.Int("duration", duration)
	return call
}

// Performer Performer
func (call *SendAudioCall) Performer(performer string) *SendAudioCall {
	call.request.String("performer", performer)
	return call
}

// Title Track name
func (call *SendAudioCall) Title(title string) *SendAudioCall {
	call.request.String("title", title)
	return call
}

// Thumb Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files »
func (call *SendAudioCall) Thumb(thumb FileArg) *SendAudioCall {
	call.request.File("thumb", thumb)
	return call
}

// DisableNotification Sends the message silently. Users will receive a notification with no sound.
func (call *SendAudioCall) DisableNotification(disableNotification bool) *SendAudioCall {
	call.request.Bool("disable_notification", disableNotification)
	return call
}

// ProtectContent Protects the contents of the sent message from forwarding and saving
func (call *SendAudioCall) ProtectContent(protectContent bool) *SendAudioCall {
	call.request.Bool("protect_content", protectContent)
	return call
}

// ReplyToMessageID If the message is a reply, ID of the original message
func (call *SendAudioCall) ReplyToMessageID(replyToMessageID int) *SendAudioCall {
	call.request.Int("reply_to_message_id", replyToMessageID)
	return call
}

// AllowSendingWithoutReply Pass True, if the message should be sent even if the specified replied-to message is not found
func (call *SendAudioCall) AllowSendingWithoutReply(allowSendingWithoutReply bool) *SendAudioCall {
	call.request.Bool("allow_sending_without_reply", allowSendingWithoutReply)
	return call
}

// ReplyMarkup Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
func (call *SendAudioCall) ReplyMarkup(replyMarkup ReplyMarkup) *SendAudioCall {
	call.request.JSON("reply_markup", replyMarkup)
	return call
}

// SendDocumentCall reprenesents a call to the sendDocument method.
// Use this method to send general files
// On success, the sent Message is returned
// Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.
type SendDocumentCall struct {
	Call[Message]
}

// NewSendDocumentCall constructs a new SendDocumentCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// document - File to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More information on Sending Files »
func NewSendDocumentCall(chatID PeerID, document FileArg) *SendDocumentCall {
	return &SendDocumentCall{
		Call[Message]{
			request: NewRequest("sendDocument").
				PeerID("chat_id", chatID).
				File("document", document),
		},
	}
}

// SendDocumentCall constructs a new SendDocumentCall with required parameters.
func (client *Client) SendDocument(chatID PeerID, document FileArg) *SendDocumentCall {
	return callWithClient(
		client,
		NewSendDocumentCall(chatID, document),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *SendDocumentCall) ChatID(chatID PeerID) *SendDocumentCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// Document File to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More information on Sending Files »
func (call *SendDocumentCall) Document(document FileArg) *SendDocumentCall {
	call.request.File("document", document)
	return call
}

// Thumb Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files »
func (call *SendDocumentCall) Thumb(thumb FileArg) *SendDocumentCall {
	call.request.File("thumb", thumb)
	return call
}

// Caption Document caption (may also be used when resending documents by file_id), 0-1024 characters after entities parsing
func (call *SendDocumentCall) Caption(caption string) *SendDocumentCall {
	call.request.String("caption", caption)
	return call
}

// ParseMode Mode for parsing entities in the document caption. See formatting options for more details.
func (call *SendDocumentCall) ParseMode(parseMode ParseMode) *SendDocumentCall {
	call.request.Stringer("parse_mode", parseMode)
	return call
}

// CaptionEntities A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode
func (call *SendDocumentCall) CaptionEntities(captionEntities []MessageEntity) *SendDocumentCall {
	call.request.JSON("caption_entities", captionEntities)
	return call
}

// DisableContentTypeDetection Disables automatic server-side content type detection for files uploaded using multipart/form-data
func (call *SendDocumentCall) DisableContentTypeDetection(disableContentTypeDetection bool) *SendDocumentCall {
	call.request.Bool("disable_content_type_detection", disableContentTypeDetection)
	return call
}

// DisableNotification Sends the message silently. Users will receive a notification with no sound.
func (call *SendDocumentCall) DisableNotification(disableNotification bool) *SendDocumentCall {
	call.request.Bool("disable_notification", disableNotification)
	return call
}

// ProtectContent Protects the contents of the sent message from forwarding and saving
func (call *SendDocumentCall) ProtectContent(protectContent bool) *SendDocumentCall {
	call.request.Bool("protect_content", protectContent)
	return call
}

// ReplyToMessageID If the message is a reply, ID of the original message
func (call *SendDocumentCall) ReplyToMessageID(replyToMessageID int) *SendDocumentCall {
	call.request.Int("reply_to_message_id", replyToMessageID)
	return call
}

// AllowSendingWithoutReply Pass True, if the message should be sent even if the specified replied-to message is not found
func (call *SendDocumentCall) AllowSendingWithoutReply(allowSendingWithoutReply bool) *SendDocumentCall {
	call.request.Bool("allow_sending_without_reply", allowSendingWithoutReply)
	return call
}

// ReplyMarkup Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
func (call *SendDocumentCall) ReplyMarkup(replyMarkup ReplyMarkup) *SendDocumentCall {
	call.request.JSON("reply_markup", replyMarkup)
	return call
}

// SendVideoCall reprenesents a call to the sendVideo method.
// Use this method to send video files, Telegram clients support MPEG4 videos (other formats may be sent as Document)
// On success, the sent Message is returned
// Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.
type SendVideoCall struct {
	Call[Message]
}

// NewSendVideoCall constructs a new SendVideoCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// video - Video to send. Pass a file_id as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using multipart/form-data. More information on Sending Files »
func NewSendVideoCall(chatID PeerID, video FileArg) *SendVideoCall {
	return &SendVideoCall{
		Call[Message]{
			request: NewRequest("sendVideo").
				PeerID("chat_id", chatID).
				File("video", video),
		},
	}
}

// SendVideoCall constructs a new SendVideoCall with required parameters.
func (client *Client) SendVideo(chatID PeerID, video FileArg) *SendVideoCall {
	return callWithClient(
		client,
		NewSendVideoCall(chatID, video),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *SendVideoCall) ChatID(chatID PeerID) *SendVideoCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// Video Video to send. Pass a file_id as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using multipart/form-data. More information on Sending Files »
func (call *SendVideoCall) Video(video FileArg) *SendVideoCall {
	call.request.File("video", video)
	return call
}

// Duration Duration of sent video in seconds
func (call *SendVideoCall) Duration(duration int) *SendVideoCall {
	call.request.Int("duration", duration)
	return call
}

// Width Video width
func (call *SendVideoCall) Width(width int) *SendVideoCall {
	call.request.Int("width", width)
	return call
}

// Height Video height
func (call *SendVideoCall) Height(height int) *SendVideoCall {
	call.request.Int("height", height)
	return call
}

// Thumb Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files »
func (call *SendVideoCall) Thumb(thumb FileArg) *SendVideoCall {
	call.request.File("thumb", thumb)
	return call
}

// Caption Video caption (may also be used when resending videos by file_id), 0-1024 characters after entities parsing
func (call *SendVideoCall) Caption(caption string) *SendVideoCall {
	call.request.String("caption", caption)
	return call
}

// ParseMode Mode for parsing entities in the video caption. See formatting options for more details.
func (call *SendVideoCall) ParseMode(parseMode ParseMode) *SendVideoCall {
	call.request.Stringer("parse_mode", parseMode)
	return call
}

// CaptionEntities A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode
func (call *SendVideoCall) CaptionEntities(captionEntities []MessageEntity) *SendVideoCall {
	call.request.JSON("caption_entities", captionEntities)
	return call
}

// SupportsStreaming Pass True, if the uploaded video is suitable for streaming
func (call *SendVideoCall) SupportsStreaming(supportsStreaming bool) *SendVideoCall {
	call.request.Bool("supports_streaming", supportsStreaming)
	return call
}

// DisableNotification Sends the message silently. Users will receive a notification with no sound.
func (call *SendVideoCall) DisableNotification(disableNotification bool) *SendVideoCall {
	call.request.Bool("disable_notification", disableNotification)
	return call
}

// ProtectContent Protects the contents of the sent message from forwarding and saving
func (call *SendVideoCall) ProtectContent(protectContent bool) *SendVideoCall {
	call.request.Bool("protect_content", protectContent)
	return call
}

// ReplyToMessageID If the message is a reply, ID of the original message
func (call *SendVideoCall) ReplyToMessageID(replyToMessageID int) *SendVideoCall {
	call.request.Int("reply_to_message_id", replyToMessageID)
	return call
}

// AllowSendingWithoutReply Pass True, if the message should be sent even if the specified replied-to message is not found
func (call *SendVideoCall) AllowSendingWithoutReply(allowSendingWithoutReply bool) *SendVideoCall {
	call.request.Bool("allow_sending_without_reply", allowSendingWithoutReply)
	return call
}

// ReplyMarkup Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
func (call *SendVideoCall) ReplyMarkup(replyMarkup ReplyMarkup) *SendVideoCall {
	call.request.JSON("reply_markup", replyMarkup)
	return call
}

// SendAnimationCall reprenesents a call to the sendAnimation method.
// Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound)
// On success, the sent Message is returned
// Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.
type SendAnimationCall struct {
	Call[Message]
}

// NewSendAnimationCall constructs a new SendAnimationCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// animation - Animation to send. Pass a file_id as String to send an animation that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an animation from the Internet, or upload a new animation using multipart/form-data. More information on Sending Files »
func NewSendAnimationCall(chatID PeerID, animation FileArg) *SendAnimationCall {
	return &SendAnimationCall{
		Call[Message]{
			request: NewRequest("sendAnimation").
				PeerID("chat_id", chatID).
				File("animation", animation),
		},
	}
}

// SendAnimationCall constructs a new SendAnimationCall with required parameters.
func (client *Client) SendAnimation(chatID PeerID, animation FileArg) *SendAnimationCall {
	return callWithClient(
		client,
		NewSendAnimationCall(chatID, animation),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *SendAnimationCall) ChatID(chatID PeerID) *SendAnimationCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// Animation Animation to send. Pass a file_id as String to send an animation that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an animation from the Internet, or upload a new animation using multipart/form-data. More information on Sending Files »
func (call *SendAnimationCall) Animation(animation FileArg) *SendAnimationCall {
	call.request.File("animation", animation)
	return call
}

// Duration Duration of sent animation in seconds
func (call *SendAnimationCall) Duration(duration int) *SendAnimationCall {
	call.request.Int("duration", duration)
	return call
}

// Width Animation width
func (call *SendAnimationCall) Width(width int) *SendAnimationCall {
	call.request.Int("width", width)
	return call
}

// Height Animation height
func (call *SendAnimationCall) Height(height int) *SendAnimationCall {
	call.request.Int("height", height)
	return call
}

// Thumb Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files »
func (call *SendAnimationCall) Thumb(thumb FileArg) *SendAnimationCall {
	call.request.File("thumb", thumb)
	return call
}

// Caption Animation caption (may also be used when resending animation by file_id), 0-1024 characters after entities parsing
func (call *SendAnimationCall) Caption(caption string) *SendAnimationCall {
	call.request.String("caption", caption)
	return call
}

// ParseMode Mode for parsing entities in the animation caption. See formatting options for more details.
func (call *SendAnimationCall) ParseMode(parseMode ParseMode) *SendAnimationCall {
	call.request.Stringer("parse_mode", parseMode)
	return call
}

// CaptionEntities A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode
func (call *SendAnimationCall) CaptionEntities(captionEntities []MessageEntity) *SendAnimationCall {
	call.request.JSON("caption_entities", captionEntities)
	return call
}

// DisableNotification Sends the message silently. Users will receive a notification with no sound.
func (call *SendAnimationCall) DisableNotification(disableNotification bool) *SendAnimationCall {
	call.request.Bool("disable_notification", disableNotification)
	return call
}

// ProtectContent Protects the contents of the sent message from forwarding and saving
func (call *SendAnimationCall) ProtectContent(protectContent bool) *SendAnimationCall {
	call.request.Bool("protect_content", protectContent)
	return call
}

// ReplyToMessageID If the message is a reply, ID of the original message
func (call *SendAnimationCall) ReplyToMessageID(replyToMessageID int) *SendAnimationCall {
	call.request.Int("reply_to_message_id", replyToMessageID)
	return call
}

// AllowSendingWithoutReply Pass True, if the message should be sent even if the specified replied-to message is not found
func (call *SendAnimationCall) AllowSendingWithoutReply(allowSendingWithoutReply bool) *SendAnimationCall {
	call.request.Bool("allow_sending_without_reply", allowSendingWithoutReply)
	return call
}

// ReplyMarkup Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
func (call *SendAnimationCall) ReplyMarkup(replyMarkup ReplyMarkup) *SendAnimationCall {
	call.request.JSON("reply_markup", replyMarkup)
	return call
}

// SendVoiceCall reprenesents a call to the sendVoice method.
// Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message
// For this to work, your audio must be in an .OGG file encoded with OPUS (other formats may be sent as Audio or Document)
// On success, the sent Message is returned
// Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.
type SendVoiceCall struct {
	Call[Message]
}

// NewSendVoiceCall constructs a new SendVoiceCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// voice - Audio file to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More information on Sending Files »
func NewSendVoiceCall(chatID PeerID, voice FileArg) *SendVoiceCall {
	return &SendVoiceCall{
		Call[Message]{
			request: NewRequest("sendVoice").
				PeerID("chat_id", chatID).
				File("voice", voice),
		},
	}
}

// SendVoiceCall constructs a new SendVoiceCall with required parameters.
func (client *Client) SendVoice(chatID PeerID, voice FileArg) *SendVoiceCall {
	return callWithClient(
		client,
		NewSendVoiceCall(chatID, voice),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *SendVoiceCall) ChatID(chatID PeerID) *SendVoiceCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// Voice Audio file to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More information on Sending Files »
func (call *SendVoiceCall) Voice(voice FileArg) *SendVoiceCall {
	call.request.File("voice", voice)
	return call
}

// Caption Voice message caption, 0-1024 characters after entities parsing
func (call *SendVoiceCall) Caption(caption string) *SendVoiceCall {
	call.request.String("caption", caption)
	return call
}

// ParseMode Mode for parsing entities in the voice message caption. See formatting options for more details.
func (call *SendVoiceCall) ParseMode(parseMode ParseMode) *SendVoiceCall {
	call.request.Stringer("parse_mode", parseMode)
	return call
}

// CaptionEntities A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode
func (call *SendVoiceCall) CaptionEntities(captionEntities []MessageEntity) *SendVoiceCall {
	call.request.JSON("caption_entities", captionEntities)
	return call
}

// Duration Duration of the voice message in seconds
func (call *SendVoiceCall) Duration(duration int) *SendVoiceCall {
	call.request.Int("duration", duration)
	return call
}

// DisableNotification Sends the message silently. Users will receive a notification with no sound.
func (call *SendVoiceCall) DisableNotification(disableNotification bool) *SendVoiceCall {
	call.request.Bool("disable_notification", disableNotification)
	return call
}

// ProtectContent Protects the contents of the sent message from forwarding and saving
func (call *SendVoiceCall) ProtectContent(protectContent bool) *SendVoiceCall {
	call.request.Bool("protect_content", protectContent)
	return call
}

// ReplyToMessageID If the message is a reply, ID of the original message
func (call *SendVoiceCall) ReplyToMessageID(replyToMessageID int) *SendVoiceCall {
	call.request.Int("reply_to_message_id", replyToMessageID)
	return call
}

// AllowSendingWithoutReply Pass True, if the message should be sent even if the specified replied-to message is not found
func (call *SendVoiceCall) AllowSendingWithoutReply(allowSendingWithoutReply bool) *SendVoiceCall {
	call.request.Bool("allow_sending_without_reply", allowSendingWithoutReply)
	return call
}

// ReplyMarkup Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
func (call *SendVoiceCall) ReplyMarkup(replyMarkup ReplyMarkup) *SendVoiceCall {
	call.request.JSON("reply_markup", replyMarkup)
	return call
}

// SendVideoNoteCall reprenesents a call to the sendVideoNote method.
// As of v.4.0, Telegram clients support rounded square MPEG4 videos of up to 1 minute long
// Use this method to send video messages
// On success, the sent Message is returned.
type SendVideoNoteCall struct {
	Call[Message]
}

// NewSendVideoNoteCall constructs a new SendVideoNoteCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// videoNote - Video note to send. Pass a file_id as String to send a video note that exists on the Telegram servers (recommended) or upload a new video using multipart/form-data. More information on Sending Files ». Sending video notes by a URL is currently unsupported
func NewSendVideoNoteCall(chatID PeerID, videoNote FileArg) *SendVideoNoteCall {
	return &SendVideoNoteCall{
		Call[Message]{
			request: NewRequest("sendVideoNote").
				PeerID("chat_id", chatID).
				File("video_note", videoNote),
		},
	}
}

// SendVideoNoteCall constructs a new SendVideoNoteCall with required parameters.
func (client *Client) SendVideoNote(chatID PeerID, videoNote FileArg) *SendVideoNoteCall {
	return callWithClient(
		client,
		NewSendVideoNoteCall(chatID, videoNote),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *SendVideoNoteCall) ChatID(chatID PeerID) *SendVideoNoteCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// VideoNote Video note to send. Pass a file_id as String to send a video note that exists on the Telegram servers (recommended) or upload a new video using multipart/form-data. More information on Sending Files ». Sending video notes by a URL is currently unsupported
func (call *SendVideoNoteCall) VideoNote(videoNote FileArg) *SendVideoNoteCall {
	call.request.File("video_note", videoNote)
	return call
}

// Duration Duration of sent video in seconds
func (call *SendVideoNoteCall) Duration(duration int) *SendVideoNoteCall {
	call.request.Int("duration", duration)
	return call
}

// Length Video width and height, i.e. diameter of the video message
func (call *SendVideoNoteCall) Length(length int) *SendVideoNoteCall {
	call.request.Int("length", length)
	return call
}

// Thumb Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files »
func (call *SendVideoNoteCall) Thumb(thumb FileArg) *SendVideoNoteCall {
	call.request.File("thumb", thumb)
	return call
}

// DisableNotification Sends the message silently. Users will receive a notification with no sound.
func (call *SendVideoNoteCall) DisableNotification(disableNotification bool) *SendVideoNoteCall {
	call.request.Bool("disable_notification", disableNotification)
	return call
}

// ProtectContent Protects the contents of the sent message from forwarding and saving
func (call *SendVideoNoteCall) ProtectContent(protectContent bool) *SendVideoNoteCall {
	call.request.Bool("protect_content", protectContent)
	return call
}

// ReplyToMessageID If the message is a reply, ID of the original message
func (call *SendVideoNoteCall) ReplyToMessageID(replyToMessageID int) *SendVideoNoteCall {
	call.request.Int("reply_to_message_id", replyToMessageID)
	return call
}

// AllowSendingWithoutReply Pass True, if the message should be sent even if the specified replied-to message is not found
func (call *SendVideoNoteCall) AllowSendingWithoutReply(allowSendingWithoutReply bool) *SendVideoNoteCall {
	call.request.Bool("allow_sending_without_reply", allowSendingWithoutReply)
	return call
}

// ReplyMarkup Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
func (call *SendVideoNoteCall) ReplyMarkup(replyMarkup ReplyMarkup) *SendVideoNoteCall {
	call.request.JSON("reply_markup", replyMarkup)
	return call
}

// SendMediaGroupCall reprenesents a call to the sendMediaGroup method.
// Use this method to send a group of photos, videos, documents or audios as an album
// Documents and audio files can be only grouped in an album with messages of the same type
// On success, an array of Messages that were sent is returned.
type SendMediaGroupCall struct {
	Call[[]Message]
}

// NewSendMediaGroupCall constructs a new SendMediaGroupCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// media - A JSON-serialized array describing messages to be sent, must include 2-10 items
func NewSendMediaGroupCall(chatID PeerID, media []InputMedia) *SendMediaGroupCall {
	return &SendMediaGroupCall{
		Call[[]Message]{
			request: NewRequest("sendMediaGroup").
				PeerID("chat_id", chatID).
				InputMediaSlice("media", media),
		},
	}
}

// SendMediaGroupCall constructs a new SendMediaGroupCall with required parameters.
func (client *Client) SendMediaGroup(chatID PeerID, media []InputMedia) *SendMediaGroupCall {
	return callWithClient(
		client,
		NewSendMediaGroupCall(chatID, media),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *SendMediaGroupCall) ChatID(chatID PeerID) *SendMediaGroupCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// Media A JSON-serialized array describing messages to be sent, must include 2-10 items
func (call *SendMediaGroupCall) Media(media []InputMedia) *SendMediaGroupCall {
	call.request.InputMediaSlice("media", media)
	return call
}

// DisableNotification Sends messages silently. Users will receive a notification with no sound.
func (call *SendMediaGroupCall) DisableNotification(disableNotification bool) *SendMediaGroupCall {
	call.request.Bool("disable_notification", disableNotification)
	return call
}

// ProtectContent Protects the contents of the sent messages from forwarding and saving
func (call *SendMediaGroupCall) ProtectContent(protectContent bool) *SendMediaGroupCall {
	call.request.Bool("protect_content", protectContent)
	return call
}

// ReplyToMessageID If the messages are a reply, ID of the original message
func (call *SendMediaGroupCall) ReplyToMessageID(replyToMessageID int) *SendMediaGroupCall {
	call.request.Int("reply_to_message_id", replyToMessageID)
	return call
}

// AllowSendingWithoutReply Pass True, if the message should be sent even if the specified replied-to message is not found
func (call *SendMediaGroupCall) AllowSendingWithoutReply(allowSendingWithoutReply bool) *SendMediaGroupCall {
	call.request.Bool("allow_sending_without_reply", allowSendingWithoutReply)
	return call
}

// SendLocationCall reprenesents a call to the sendLocation method.
// Use this method to send point on the map
// On success, the sent Message is returned.
type SendLocationCall struct {
	Call[Message]
}

// NewSendLocationCall constructs a new SendLocationCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// latitude - Latitude of the location
// longitude - Longitude of the location
func NewSendLocationCall(chatID PeerID, latitude float64, longitude float64) *SendLocationCall {
	return &SendLocationCall{
		Call[Message]{
			request: NewRequest("sendLocation").
				PeerID("chat_id", chatID).
				Float64("latitude", latitude).
				Float64("longitude", longitude),
		},
	}
}

// SendLocationCall constructs a new SendLocationCall with required parameters.
func (client *Client) SendLocation(chatID PeerID, latitude float64, longitude float64) *SendLocationCall {
	return callWithClient(
		client,
		NewSendLocationCall(chatID, latitude, longitude),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *SendLocationCall) ChatID(chatID PeerID) *SendLocationCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// Latitude Latitude of the location
func (call *SendLocationCall) Latitude(latitude float64) *SendLocationCall {
	call.request.Float64("latitude", latitude)
	return call
}

// Longitude Longitude of the location
func (call *SendLocationCall) Longitude(longitude float64) *SendLocationCall {
	call.request.Float64("longitude", longitude)
	return call
}

// HorizontalAccuracy The radius of uncertainty for the location, measured in meters; 0-1500
func (call *SendLocationCall) HorizontalAccuracy(horizontalAccuracy float64) *SendLocationCall {
	call.request.Float64("horizontal_accuracy", horizontalAccuracy)
	return call
}

// LivePeriod Period in seconds for which the location will be updated (see Live Locations, should be between 60 and 86400.
func (call *SendLocationCall) LivePeriod(livePeriod int) *SendLocationCall {
	call.request.Int("live_period", livePeriod)
	return call
}

// Heading For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
func (call *SendLocationCall) Heading(heading int) *SendLocationCall {
	call.request.Int("heading", heading)
	return call
}

// ProximityAlertRadius For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
func (call *SendLocationCall) ProximityAlertRadius(proximityAlertRadius int) *SendLocationCall {
	call.request.Int("proximity_alert_radius", proximityAlertRadius)
	return call
}

// DisableNotification Sends the message silently. Users will receive a notification with no sound.
func (call *SendLocationCall) DisableNotification(disableNotification bool) *SendLocationCall {
	call.request.Bool("disable_notification", disableNotification)
	return call
}

// ProtectContent Protects the contents of the sent message from forwarding and saving
func (call *SendLocationCall) ProtectContent(protectContent bool) *SendLocationCall {
	call.request.Bool("protect_content", protectContent)
	return call
}

// ReplyToMessageID If the message is a reply, ID of the original message
func (call *SendLocationCall) ReplyToMessageID(replyToMessageID int) *SendLocationCall {
	call.request.Int("reply_to_message_id", replyToMessageID)
	return call
}

// AllowSendingWithoutReply Pass True, if the message should be sent even if the specified replied-to message is not found
func (call *SendLocationCall) AllowSendingWithoutReply(allowSendingWithoutReply bool) *SendLocationCall {
	call.request.Bool("allow_sending_without_reply", allowSendingWithoutReply)
	return call
}

// ReplyMarkup Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
func (call *SendLocationCall) ReplyMarkup(replyMarkup ReplyMarkup) *SendLocationCall {
	call.request.JSON("reply_markup", replyMarkup)
	return call
}

// EditMessageLiveLocationCall reprenesents a call to the editMessageLiveLocation method.
// Use this method to edit live location messages
// A location can be edited until its live_period expires or editing is explicitly disabled by a call to stopMessageLiveLocation
// On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.
type EditMessageLiveLocationCall struct {
	Call[Message]
}

// NewEditMessageLiveLocationCall constructs a new EditMessageLiveLocationCall with required parameters.
// chatID - Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// messageID - Required if inline_message_id is not specified. Identifier of the message to edit
func NewEditMessageLiveLocationCall(chatID PeerID, messageID int) *EditMessageLiveLocationCall {
	return &EditMessageLiveLocationCall{
		Call[Message]{
			request: NewRequest("editMessageLiveLocation").
				PeerID("chat_id", chatID).
				Int("message_id", messageID),
		},
	}
}

// NewEditMessageLiveLocationCall constructs a new EditMessageLiveLocationCall with required parameters.
// inlineMessageID - Required if chat_id and message_id are not specified. Identifier of the inline message
func NewEditMessageLiveLocationInlineCall(inlineMessageID string) *EditMessageLiveLocationCall {
	return &EditMessageLiveLocationCall{
		Call[Message]{
			request: NewRequest("editMessageLiveLocation").
				String("inline_message_id", inlineMessageID),
		},
	}
}

// EditMessageLiveLocationCall constructs a new EditMessageLiveLocationCall with required parameters.
func (client *Client) EditMessageLiveLocation(chatID PeerID, messageID int) *EditMessageLiveLocationCall {
	return callWithClient(
		client,
		NewEditMessageLiveLocationCall(chatID, messageID),
	)
}

// EditMessageLiveLocationCall constructs a new EditMessageLiveLocationCall with required parameters.
func (client *Client) EditMessageLiveLocationInline(inlineMessageID string) *EditMessageLiveLocationCall {
	return callWithClient(
		client,
		NewEditMessageLiveLocationInlineCall(inlineMessageID),
	)
}

// ChatID Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *EditMessageLiveLocationCall) ChatID(chatID PeerID) *EditMessageLiveLocationCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// MessageID Required if inline_message_id is not specified. Identifier of the message to edit
func (call *EditMessageLiveLocationCall) MessageID(messageID int) *EditMessageLiveLocationCall {
	call.request.Int("message_id", messageID)
	return call
}

// InlineMessageID Required if chat_id and message_id are not specified. Identifier of the inline message
func (call *EditMessageLiveLocationCall) InlineMessageID(inlineMessageID string) *EditMessageLiveLocationCall {
	call.request.String("inline_message_id", inlineMessageID)
	return call
}

// Latitude Latitude of new location
func (call *EditMessageLiveLocationCall) Latitude(latitude float64) *EditMessageLiveLocationCall {
	call.request.Float64("latitude", latitude)
	return call
}

// Longitude Longitude of new location
func (call *EditMessageLiveLocationCall) Longitude(longitude float64) *EditMessageLiveLocationCall {
	call.request.Float64("longitude", longitude)
	return call
}

// HorizontalAccuracy The radius of uncertainty for the location, measured in meters; 0-1500
func (call *EditMessageLiveLocationCall) HorizontalAccuracy(horizontalAccuracy float64) *EditMessageLiveLocationCall {
	call.request.Float64("horizontal_accuracy", horizontalAccuracy)
	return call
}

// Heading Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
func (call *EditMessageLiveLocationCall) Heading(heading int) *EditMessageLiveLocationCall {
	call.request.Int("heading", heading)
	return call
}

// ProximityAlertRadius The maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
func (call *EditMessageLiveLocationCall) ProximityAlertRadius(proximityAlertRadius int) *EditMessageLiveLocationCall {
	call.request.Int("proximity_alert_radius", proximityAlertRadius)
	return call
}

// ReplyMarkup A JSON-serialized object for a new inline keyboard.
func (call *EditMessageLiveLocationCall) ReplyMarkup(replyMarkup InlineKeyboardMarkup) *EditMessageLiveLocationCall {
	call.request.JSON("reply_markup", replyMarkup)
	return call
}

// StopMessageLiveLocationCall reprenesents a call to the stopMessageLiveLocation method.
// Use this method to stop updating a live location message before live_period expires
// On success, if the message is not an inline message, the edited Message is returned, otherwise True is returned.
type StopMessageLiveLocationCall struct {
	Call[Message]
}

// NewStopMessageLiveLocationCall constructs a new StopMessageLiveLocationCall with required parameters.
// chatID - Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// messageID - Required if inline_message_id is not specified. Identifier of the message with live location to stop
func NewStopMessageLiveLocationCall(chatID PeerID, messageID int) *StopMessageLiveLocationCall {
	return &StopMessageLiveLocationCall{
		Call[Message]{
			request: NewRequest("stopMessageLiveLocation").
				PeerID("chat_id", chatID).
				Int("message_id", messageID),
		},
	}
}

// NewStopMessageLiveLocationCall constructs a new StopMessageLiveLocationCall with required parameters.
// inlineMessageID - Required if chat_id and message_id are not specified. Identifier of the inline message
func NewStopMessageLiveLocationInlineCall(inlineMessageID string) *StopMessageLiveLocationCall {
	return &StopMessageLiveLocationCall{
		Call[Message]{
			request: NewRequest("stopMessageLiveLocation").
				String("inline_message_id", inlineMessageID),
		},
	}
}

// StopMessageLiveLocationCall constructs a new StopMessageLiveLocationCall with required parameters.
func (client *Client) StopMessageLiveLocation(chatID PeerID, messageID int) *StopMessageLiveLocationCall {
	return callWithClient(
		client,
		NewStopMessageLiveLocationCall(chatID, messageID),
	)
}

// StopMessageLiveLocationCall constructs a new StopMessageLiveLocationCall with required parameters.
func (client *Client) StopMessageLiveLocationInline(inlineMessageID string) *StopMessageLiveLocationCall {
	return callWithClient(
		client,
		NewStopMessageLiveLocationInlineCall(inlineMessageID),
	)
}

// ChatID Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *StopMessageLiveLocationCall) ChatID(chatID PeerID) *StopMessageLiveLocationCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// MessageID Required if inline_message_id is not specified. Identifier of the message with live location to stop
func (call *StopMessageLiveLocationCall) MessageID(messageID int) *StopMessageLiveLocationCall {
	call.request.Int("message_id", messageID)
	return call
}

// InlineMessageID Required if chat_id and message_id are not specified. Identifier of the inline message
func (call *StopMessageLiveLocationCall) InlineMessageID(inlineMessageID string) *StopMessageLiveLocationCall {
	call.request.String("inline_message_id", inlineMessageID)
	return call
}

// ReplyMarkup A JSON-serialized object for a new inline keyboard.
func (call *StopMessageLiveLocationCall) ReplyMarkup(replyMarkup InlineKeyboardMarkup) *StopMessageLiveLocationCall {
	call.request.JSON("reply_markup", replyMarkup)
	return call
}

// SendVenueCall reprenesents a call to the sendVenue method.
// Use this method to send information about a venue
// On success, the sent Message is returned.
type SendVenueCall struct {
	Call[Message]
}

// NewSendVenueCall constructs a new SendVenueCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// latitude - Latitude of the venue
// longitude - Longitude of the venue
// title - Name of the venue
// address - Address of the venue
func NewSendVenueCall(chatID PeerID, latitude float64, longitude float64, title string, address string) *SendVenueCall {
	return &SendVenueCall{
		Call[Message]{
			request: NewRequest("sendVenue").
				PeerID("chat_id", chatID).
				Float64("latitude", latitude).
				Float64("longitude", longitude).
				String("title", title).
				String("address", address),
		},
	}
}

// SendVenueCall constructs a new SendVenueCall with required parameters.
func (client *Client) SendVenue(chatID PeerID, latitude float64, longitude float64, title string, address string) *SendVenueCall {
	return callWithClient(
		client,
		NewSendVenueCall(chatID, latitude, longitude, title, address),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *SendVenueCall) ChatID(chatID PeerID) *SendVenueCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// Latitude Latitude of the venue
func (call *SendVenueCall) Latitude(latitude float64) *SendVenueCall {
	call.request.Float64("latitude", latitude)
	return call
}

// Longitude Longitude of the venue
func (call *SendVenueCall) Longitude(longitude float64) *SendVenueCall {
	call.request.Float64("longitude", longitude)
	return call
}

// Title Name of the venue
func (call *SendVenueCall) Title(title string) *SendVenueCall {
	call.request.String("title", title)
	return call
}

// Address Address of the venue
func (call *SendVenueCall) Address(address string) *SendVenueCall {
	call.request.String("address", address)
	return call
}

// FoursquareID Foursquare identifier of the venue
func (call *SendVenueCall) FoursquareID(foursquareID string) *SendVenueCall {
	call.request.String("foursquare_id", foursquareID)
	return call
}

// FoursquareType Foursquare type of the venue, if known. (For example, “arts_entertainment/default”, “arts_entertainment/aquarium” or “food/icecream”.)
func (call *SendVenueCall) FoursquareType(foursquareType string) *SendVenueCall {
	call.request.String("foursquare_type", foursquareType)
	return call
}

// GooglePlaceID Google Places identifier of the venue
func (call *SendVenueCall) GooglePlaceID(googlePlaceID string) *SendVenueCall {
	call.request.String("google_place_id", googlePlaceID)
	return call
}

// GooglePlaceType Google Places type of the venue. (See supported types.)
func (call *SendVenueCall) GooglePlaceType(googlePlaceType string) *SendVenueCall {
	call.request.String("google_place_type", googlePlaceType)
	return call
}

// DisableNotification Sends the message silently. Users will receive a notification with no sound.
func (call *SendVenueCall) DisableNotification(disableNotification bool) *SendVenueCall {
	call.request.Bool("disable_notification", disableNotification)
	return call
}

// ProtectContent Protects the contents of the sent message from forwarding and saving
func (call *SendVenueCall) ProtectContent(protectContent bool) *SendVenueCall {
	call.request.Bool("protect_content", protectContent)
	return call
}

// ReplyToMessageID If the message is a reply, ID of the original message
func (call *SendVenueCall) ReplyToMessageID(replyToMessageID int) *SendVenueCall {
	call.request.Int("reply_to_message_id", replyToMessageID)
	return call
}

// AllowSendingWithoutReply Pass True, if the message should be sent even if the specified replied-to message is not found
func (call *SendVenueCall) AllowSendingWithoutReply(allowSendingWithoutReply bool) *SendVenueCall {
	call.request.Bool("allow_sending_without_reply", allowSendingWithoutReply)
	return call
}

// ReplyMarkup Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
func (call *SendVenueCall) ReplyMarkup(replyMarkup ReplyMarkup) *SendVenueCall {
	call.request.JSON("reply_markup", replyMarkup)
	return call
}

// SendContactCall reprenesents a call to the sendContact method.
// Use this method to send phone contacts
// On success, the sent Message is returned.
type SendContactCall struct {
	Call[Message]
}

// NewSendContactCall constructs a new SendContactCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// phoneNumber - Contact's phone number
// firstName - Contact's first name
func NewSendContactCall(chatID PeerID, phoneNumber string, firstName string) *SendContactCall {
	return &SendContactCall{
		Call[Message]{
			request: NewRequest("sendContact").
				PeerID("chat_id", chatID).
				String("phone_number", phoneNumber).
				String("first_name", firstName),
		},
	}
}

// SendContactCall constructs a new SendContactCall with required parameters.
func (client *Client) SendContact(chatID PeerID, phoneNumber string, firstName string) *SendContactCall {
	return callWithClient(
		client,
		NewSendContactCall(chatID, phoneNumber, firstName),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *SendContactCall) ChatID(chatID PeerID) *SendContactCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// PhoneNumber Contact's phone number
func (call *SendContactCall) PhoneNumber(phoneNumber string) *SendContactCall {
	call.request.String("phone_number", phoneNumber)
	return call
}

// FirstName Contact's first name
func (call *SendContactCall) FirstName(firstName string) *SendContactCall {
	call.request.String("first_name", firstName)
	return call
}

// LastName Contact's last name
func (call *SendContactCall) LastName(lastName string) *SendContactCall {
	call.request.String("last_name", lastName)
	return call
}

// Vcard Additional data about the contact in the form of a vCard, 0-2048 bytes
func (call *SendContactCall) Vcard(vcard string) *SendContactCall {
	call.request.String("vcard", vcard)
	return call
}

// DisableNotification Sends the message silently. Users will receive a notification with no sound.
func (call *SendContactCall) DisableNotification(disableNotification bool) *SendContactCall {
	call.request.Bool("disable_notification", disableNotification)
	return call
}

// ProtectContent Protects the contents of the sent message from forwarding and saving
func (call *SendContactCall) ProtectContent(protectContent bool) *SendContactCall {
	call.request.Bool("protect_content", protectContent)
	return call
}

// ReplyToMessageID If the message is a reply, ID of the original message
func (call *SendContactCall) ReplyToMessageID(replyToMessageID int) *SendContactCall {
	call.request.Int("reply_to_message_id", replyToMessageID)
	return call
}

// AllowSendingWithoutReply Pass True, if the message should be sent even if the specified replied-to message is not found
func (call *SendContactCall) AllowSendingWithoutReply(allowSendingWithoutReply bool) *SendContactCall {
	call.request.Bool("allow_sending_without_reply", allowSendingWithoutReply)
	return call
}

// ReplyMarkup Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove keyboard or to force a reply from the user.
func (call *SendContactCall) ReplyMarkup(replyMarkup ReplyMarkup) *SendContactCall {
	call.request.JSON("reply_markup", replyMarkup)
	return call
}

// SendPollCall reprenesents a call to the sendPoll method.
// Use this method to send a native poll
// On success, the sent Message is returned.
type SendPollCall struct {
	Call[Message]
}

// NewSendPollCall constructs a new SendPollCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// question - Poll question, 1-300 characters
// options - A JSON-serialized list of answer options, 2-10 strings 1-100 characters each
func NewSendPollCall(chatID PeerID, question string, options []string) *SendPollCall {
	return &SendPollCall{
		Call[Message]{
			request: NewRequest("sendPoll").
				PeerID("chat_id", chatID).
				String("question", question).
				JSON("options", options),
		},
	}
}

// SendPollCall constructs a new SendPollCall with required parameters.
func (client *Client) SendPoll(chatID PeerID, question string, options []string) *SendPollCall {
	return callWithClient(
		client,
		NewSendPollCall(chatID, question, options),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *SendPollCall) ChatID(chatID PeerID) *SendPollCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// Question Poll question, 1-300 characters
func (call *SendPollCall) Question(question string) *SendPollCall {
	call.request.String("question", question)
	return call
}

// Options A JSON-serialized list of answer options, 2-10 strings 1-100 characters each
func (call *SendPollCall) Options(options []string) *SendPollCall {
	call.request.JSON("options", options)
	return call
}

// IsAnonymous True, if the poll needs to be anonymous, defaults to True
func (call *SendPollCall) IsAnonymous(isAnonymous bool) *SendPollCall {
	call.request.Bool("is_anonymous", isAnonymous)
	return call
}

// Type Poll type, “quiz” or “regular”, defaults to “regular”
func (call *SendPollCall) Type(typ string) *SendPollCall {
	call.request.String("type", typ)
	return call
}

// AllowsMultipleAnswers True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to False
func (call *SendPollCall) AllowsMultipleAnswers(allowsMultipleAnswers bool) *SendPollCall {
	call.request.Bool("allows_multiple_answers", allowsMultipleAnswers)
	return call
}

// CorrectOptionID 0-based identifier of the correct answer option, required for polls in quiz mode
func (call *SendPollCall) CorrectOptionID(correctOptionID int) *SendPollCall {
	call.request.Int("correct_option_id", correctOptionID)
	return call
}

// Explanation Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing
func (call *SendPollCall) Explanation(explanation string) *SendPollCall {
	call.request.String("explanation", explanation)
	return call
}

// ExplanationParseMode Mode for parsing entities in the explanation. See formatting options for more details.
func (call *SendPollCall) ExplanationParseMode(explanationParseMode string) *SendPollCall {
	call.request.String("explanation_parse_mode", explanationParseMode)
	return call
}

// ExplanationEntities A JSON-serialized list of special entities that appear in the poll explanation, which can be specified instead of parse_mode
func (call *SendPollCall) ExplanationEntities(explanationEntities []MessageEntity) *SendPollCall {
	call.request.JSON("explanation_entities", explanationEntities)
	return call
}

// OpenPeriod Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with close_date.
func (call *SendPollCall) OpenPeriod(openPeriod int) *SendPollCall {
	call.request.Int("open_period", openPeriod)
	return call
}

// CloseDate Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with open_period.
func (call *SendPollCall) CloseDate(closeDate int) *SendPollCall {
	call.request.Int("close_date", closeDate)
	return call
}

// IsClosed Pass True, if the poll needs to be immediately closed. This can be useful for poll preview.
func (call *SendPollCall) IsClosed(isClosed bool) *SendPollCall {
	call.request.Bool("is_closed", isClosed)
	return call
}

// DisableNotification Sends the message silently. Users will receive a notification with no sound.
func (call *SendPollCall) DisableNotification(disableNotification bool) *SendPollCall {
	call.request.Bool("disable_notification", disableNotification)
	return call
}

// ProtectContent Protects the contents of the sent message from forwarding and saving
func (call *SendPollCall) ProtectContent(protectContent bool) *SendPollCall {
	call.request.Bool("protect_content", protectContent)
	return call
}

// ReplyToMessageID If the message is a reply, ID of the original message
func (call *SendPollCall) ReplyToMessageID(replyToMessageID int) *SendPollCall {
	call.request.Int("reply_to_message_id", replyToMessageID)
	return call
}

// AllowSendingWithoutReply Pass True, if the message should be sent even if the specified replied-to message is not found
func (call *SendPollCall) AllowSendingWithoutReply(allowSendingWithoutReply bool) *SendPollCall {
	call.request.Bool("allow_sending_without_reply", allowSendingWithoutReply)
	return call
}

// ReplyMarkup Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
func (call *SendPollCall) ReplyMarkup(replyMarkup ReplyMarkup) *SendPollCall {
	call.request.JSON("reply_markup", replyMarkup)
	return call
}

// SendDiceCall reprenesents a call to the sendDice method.
// Use this method to send an animated emoji that will display a random value
// On success, the sent Message is returned.
type SendDiceCall struct {
	Call[Message]
}

// NewSendDiceCall constructs a new SendDiceCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func NewSendDiceCall(chatID PeerID) *SendDiceCall {
	return &SendDiceCall{
		Call[Message]{
			request: NewRequest("sendDice").
				PeerID("chat_id", chatID),
		},
	}
}

// SendDiceCall constructs a new SendDiceCall with required parameters.
func (client *Client) SendDice(chatID PeerID) *SendDiceCall {
	return callWithClient(
		client,
		NewSendDiceCall(chatID),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *SendDiceCall) ChatID(chatID PeerID) *SendDiceCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// Emoji Emoji on which the dice throw animation is based. Currently, must be one of “”, “”, “”, “”, “”, or “”. Dice can have values 1-6 for “”, “” and “”, values 1-5 for “” and “”, and values 1-64 for “”. Defaults to “”
func (call *SendDiceCall) Emoji(emoji string) *SendDiceCall {
	call.request.String("emoji", emoji)
	return call
}

// DisableNotification Sends the message silently. Users will receive a notification with no sound.
func (call *SendDiceCall) DisableNotification(disableNotification bool) *SendDiceCall {
	call.request.Bool("disable_notification", disableNotification)
	return call
}

// ProtectContent Protects the contents of the sent message from forwarding
func (call *SendDiceCall) ProtectContent(protectContent bool) *SendDiceCall {
	call.request.Bool("protect_content", protectContent)
	return call
}

// ReplyToMessageID If the message is a reply, ID of the original message
func (call *SendDiceCall) ReplyToMessageID(replyToMessageID int) *SendDiceCall {
	call.request.Int("reply_to_message_id", replyToMessageID)
	return call
}

// AllowSendingWithoutReply Pass True, if the message should be sent even if the specified replied-to message is not found
func (call *SendDiceCall) AllowSendingWithoutReply(allowSendingWithoutReply bool) *SendDiceCall {
	call.request.Bool("allow_sending_without_reply", allowSendingWithoutReply)
	return call
}

// ReplyMarkup Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
func (call *SendDiceCall) ReplyMarkup(replyMarkup ReplyMarkup) *SendDiceCall {
	call.request.JSON("reply_markup", replyMarkup)
	return call
}

// SendChatActionCall reprenesents a call to the sendChatAction method.
// Use this method when you need to tell the user that something is happening on the bot's side
// The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status)
// Example: The ImageBot needs some time to process a request and upload the image
// Instead of sending a text message along the lines of “Retrieving image, please wait…”, the bot may use sendChatAction with action = upload_photo
// The user will see a “sending photo” status for the bot.
// We only recommend using this method when a response from the bot will take a noticeable amount of time to arrive.
type SendChatActionCall struct {
	CallNoResult
}

// NewSendChatActionCall constructs a new SendChatActionCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// action - Type of action to broadcast. Choose one, depending on what the user is about to receive: typing for text messages, upload_photo for photos, record_video or upload_video for videos, record_voice or upload_voice for voice notes, upload_document for general files, choose_sticker for stickers, find_location for location data, record_video_note or upload_video_note for video notes.
func NewSendChatActionCall(chatID PeerID, action ChatAction) *SendChatActionCall {
	return &SendChatActionCall{
		CallNoResult{
			request: NewRequest("sendChatAction").
				PeerID("chat_id", chatID).
				Stringer("action", action),
		},
	}
}

// SendChatActionCall constructs a new SendChatActionCall with required parameters.
func (client *Client) SendChatAction(chatID PeerID, action ChatAction) *SendChatActionCall {
	return callWithClient(
		client,
		NewSendChatActionCall(chatID, action),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *SendChatActionCall) ChatID(chatID PeerID) *SendChatActionCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// Action Type of action to broadcast. Choose one, depending on what the user is about to receive: typing for text messages, upload_photo for photos, record_video or upload_video for videos, record_voice or upload_voice for voice notes, upload_document for general files, choose_sticker for stickers, find_location for location data, record_video_note or upload_video_note for video notes.
func (call *SendChatActionCall) Action(action ChatAction) *SendChatActionCall {
	call.request.Stringer("action", action)
	return call
}

// GetUserProfilePhotosCall reprenesents a call to the getUserProfilePhotos method.
// Use this method to get a list of profile pictures for a user
// Returns a UserProfilePhotos object.
type GetUserProfilePhotosCall struct {
	Call[UserProfilePhotos]
}

// NewGetUserProfilePhotosCall constructs a new GetUserProfilePhotosCall with required parameters.
// userID - Unique identifier of the target user
func NewGetUserProfilePhotosCall(userID UserID) *GetUserProfilePhotosCall {
	return &GetUserProfilePhotosCall{
		Call[UserProfilePhotos]{
			request: NewRequest("getUserProfilePhotos").
				UserID("user_id", userID),
		},
	}
}

// GetUserProfilePhotosCall constructs a new GetUserProfilePhotosCall with required parameters.
func (client *Client) GetUserProfilePhotos(userID UserID) *GetUserProfilePhotosCall {
	return callWithClient(
		client,
		NewGetUserProfilePhotosCall(userID),
	)
}

// UserID Unique identifier of the target user
func (call *GetUserProfilePhotosCall) UserID(userID UserID) *GetUserProfilePhotosCall {
	call.request.UserID("user_id", userID)
	return call
}

// Offset Sequential number of the first photo to be returned. By default, all photos are returned.
func (call *GetUserProfilePhotosCall) Offset(offset int) *GetUserProfilePhotosCall {
	call.request.Int("offset", offset)
	return call
}

// Limit Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.
func (call *GetUserProfilePhotosCall) Limit(limit int) *GetUserProfilePhotosCall {
	call.request.Int("limit", limit)
	return call
}

// GetFileCall reprenesents a call to the getFile method.
// Use this method to get basic information about a file and prepare it for downloading
// For the moment, bots can download files of up to 20MB in size
// On success, a File object is returned
// The file can then be downloaded via the link https://api.telegram.org/file/bot<token>/<file_path>, where <file_path> is taken from the response
// It is guaranteed that the link will be valid for at least 1 hour
// When the link expires, a new one can be requested by calling getFile again.
type GetFileCall struct {
	Call[File]
}

// NewGetFileCall constructs a new GetFileCall with required parameters.
// fileID - File identifier to get information about
func NewGetFileCall(fileID string) *GetFileCall {
	return &GetFileCall{
		Call[File]{
			request: NewRequest("getFile").
				String("file_id", fileID),
		},
	}
}

// GetFileCall constructs a new GetFileCall with required parameters.
func (client *Client) GetFile(fileID string) *GetFileCall {
	return callWithClient(
		client,
		NewGetFileCall(fileID),
	)
}

// FileID File identifier to get information about
func (call *GetFileCall) FileID(fileID string) *GetFileCall {
	call.request.String("file_id", fileID)
	return call
}

// BanChatMemberCall reprenesents a call to the banChatMember method.
// Use this method to ban a user in a group, a supergroup or a channel
// In the case of supergroups and channels, the user will not be able to return to the chat on their own using invite links, etc., unless unbanned first
// The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights
type BanChatMemberCall struct {
	CallNoResult
}

// NewBanChatMemberCall constructs a new BanChatMemberCall with required parameters.
// chatID - Unique identifier for the target group or username of the target supergroup or channel (in the format @channelusername)
// userID - Unique identifier of the target user
func NewBanChatMemberCall(chatID PeerID, userID UserID) *BanChatMemberCall {
	return &BanChatMemberCall{
		CallNoResult{
			request: NewRequest("banChatMember").
				PeerID("chat_id", chatID).
				UserID("user_id", userID),
		},
	}
}

// BanChatMemberCall constructs a new BanChatMemberCall with required parameters.
func (client *Client) BanChatMember(chatID PeerID, userID UserID) *BanChatMemberCall {
	return callWithClient(
		client,
		NewBanChatMemberCall(chatID, userID),
	)
}

// ChatID Unique identifier for the target group or username of the target supergroup or channel (in the format @channelusername)
func (call *BanChatMemberCall) ChatID(chatID PeerID) *BanChatMemberCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// UserID Unique identifier of the target user
func (call *BanChatMemberCall) UserID(userID UserID) *BanChatMemberCall {
	call.request.UserID("user_id", userID)
	return call
}

// UntilDate Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever. Applied for supergroups and channels only.
func (call *BanChatMemberCall) UntilDate(untilDate int) *BanChatMemberCall {
	call.request.Int("until_date", untilDate)
	return call
}

// RevokeMessages Pass True to delete all messages from the chat for the user that is being removed. If False, the user will be able to see messages in the group that were sent before the user was removed. Always True for supergroups and channels.
func (call *BanChatMemberCall) RevokeMessages(revokeMessages bool) *BanChatMemberCall {
	call.request.Bool("revoke_messages", revokeMessages)
	return call
}

// UnbanChatMemberCall reprenesents a call to the unbanChatMember method.
// Use this method to unban a previously banned user in a supergroup or channel
// The user will not return to the group or channel automatically, but will be able to join via link, etc
// The bot must be an administrator for this to work
// By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it
// So if the user is a member of the chat they will also be removed from the chat
// If you don't want this, use the parameter only_if_banned
type UnbanChatMemberCall struct {
	CallNoResult
}

// NewUnbanChatMemberCall constructs a new UnbanChatMemberCall with required parameters.
// chatID - Unique identifier for the target group or username of the target supergroup or channel (in the format @channelusername)
// userID - Unique identifier of the target user
func NewUnbanChatMemberCall(chatID PeerID, userID UserID) *UnbanChatMemberCall {
	return &UnbanChatMemberCall{
		CallNoResult{
			request: NewRequest("unbanChatMember").
				PeerID("chat_id", chatID).
				UserID("user_id", userID),
		},
	}
}

// UnbanChatMemberCall constructs a new UnbanChatMemberCall with required parameters.
func (client *Client) UnbanChatMember(chatID PeerID, userID UserID) *UnbanChatMemberCall {
	return callWithClient(
		client,
		NewUnbanChatMemberCall(chatID, userID),
	)
}

// ChatID Unique identifier for the target group or username of the target supergroup or channel (in the format @channelusername)
func (call *UnbanChatMemberCall) ChatID(chatID PeerID) *UnbanChatMemberCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// UserID Unique identifier of the target user
func (call *UnbanChatMemberCall) UserID(userID UserID) *UnbanChatMemberCall {
	call.request.UserID("user_id", userID)
	return call
}

// OnlyIfBanned Do nothing if the user is not banned
func (call *UnbanChatMemberCall) OnlyIfBanned(onlyIfBanned bool) *UnbanChatMemberCall {
	call.request.Bool("only_if_banned", onlyIfBanned)
	return call
}

// RestrictChatMemberCall reprenesents a call to the restrictChatMember method.
// Use this method to restrict a user in a supergroup
// The bot must be an administrator in the supergroup for this to work and must have the appropriate administrator rights
// Pass True for all permissions to lift restrictions from a user
type RestrictChatMemberCall struct {
	CallNoResult
}

// NewRestrictChatMemberCall constructs a new RestrictChatMemberCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
// userID - Unique identifier of the target user
// permissions - A JSON-serialized object for new user permissions
func NewRestrictChatMemberCall(chatID PeerID, userID UserID, permissions ChatPermissions) *RestrictChatMemberCall {
	return &RestrictChatMemberCall{
		CallNoResult{
			request: NewRequest("restrictChatMember").
				PeerID("chat_id", chatID).
				UserID("user_id", userID).
				JSON("permissions", permissions),
		},
	}
}

// RestrictChatMemberCall constructs a new RestrictChatMemberCall with required parameters.
func (client *Client) RestrictChatMember(chatID PeerID, userID UserID, permissions ChatPermissions) *RestrictChatMemberCall {
	return callWithClient(
		client,
		NewRestrictChatMemberCall(chatID, userID, permissions),
	)
}

// ChatID Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
func (call *RestrictChatMemberCall) ChatID(chatID PeerID) *RestrictChatMemberCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// UserID Unique identifier of the target user
func (call *RestrictChatMemberCall) UserID(userID UserID) *RestrictChatMemberCall {
	call.request.UserID("user_id", userID)
	return call
}

// Permissions A JSON-serialized object for new user permissions
func (call *RestrictChatMemberCall) Permissions(permissions ChatPermissions) *RestrictChatMemberCall {
	call.request.JSON("permissions", permissions)
	return call
}

// UntilDate Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever
func (call *RestrictChatMemberCall) UntilDate(untilDate int) *RestrictChatMemberCall {
	call.request.Int("until_date", untilDate)
	return call
}

// PromoteChatMemberCall reprenesents a call to the promoteChatMember method.
// Use this method to promote or demote a user in a supergroup or a channel
// The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights
// Pass False for all boolean parameters to demote a user
type PromoteChatMemberCall struct {
	CallNoResult
}

// NewPromoteChatMemberCall constructs a new PromoteChatMemberCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// userID - Unique identifier of the target user
func NewPromoteChatMemberCall(chatID PeerID, userID UserID) *PromoteChatMemberCall {
	return &PromoteChatMemberCall{
		CallNoResult{
			request: NewRequest("promoteChatMember").
				PeerID("chat_id", chatID).
				UserID("user_id", userID),
		},
	}
}

// PromoteChatMemberCall constructs a new PromoteChatMemberCall with required parameters.
func (client *Client) PromoteChatMember(chatID PeerID, userID UserID) *PromoteChatMemberCall {
	return callWithClient(
		client,
		NewPromoteChatMemberCall(chatID, userID),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *PromoteChatMemberCall) ChatID(chatID PeerID) *PromoteChatMemberCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// UserID Unique identifier of the target user
func (call *PromoteChatMemberCall) UserID(userID UserID) *PromoteChatMemberCall {
	call.request.UserID("user_id", userID)
	return call
}

// IsAnonymous Pass True, if the administrator's presence in the chat is hidden
func (call *PromoteChatMemberCall) IsAnonymous(isAnonymous bool) *PromoteChatMemberCall {
	call.request.Bool("is_anonymous", isAnonymous)
	return call
}

// CanManageChat Pass True, if the administrator can access the chat event log, chat statistics, message statistics in channels, see channel members, see anonymous administrators in supergroups and ignore slow mode. Implied by any other administrator privilege
func (call *PromoteChatMemberCall) CanManageChat(canManageChat bool) *PromoteChatMemberCall {
	call.request.Bool("can_manage_chat", canManageChat)
	return call
}

// CanPostMessages Pass True, if the administrator can create channel posts, channels only
func (call *PromoteChatMemberCall) CanPostMessages(canPostMessages bool) *PromoteChatMemberCall {
	call.request.Bool("can_post_messages", canPostMessages)
	return call
}

// CanEditMessages Pass True, if the administrator can edit messages of other users and can pin messages, channels only
func (call *PromoteChatMemberCall) CanEditMessages(canEditMessages bool) *PromoteChatMemberCall {
	call.request.Bool("can_edit_messages", canEditMessages)
	return call
}

// CanDeleteMessages Pass True, if the administrator can delete messages of other users
func (call *PromoteChatMemberCall) CanDeleteMessages(canDeleteMessages bool) *PromoteChatMemberCall {
	call.request.Bool("can_delete_messages", canDeleteMessages)
	return call
}

// CanManageVideoChats Pass True, if the administrator can manage video chats
func (call *PromoteChatMemberCall) CanManageVideoChats(canManageVideoChats bool) *PromoteChatMemberCall {
	call.request.Bool("can_manage_video_chats", canManageVideoChats)
	return call
}

// CanRestrictMembers Pass True, if the administrator can restrict, ban or unban chat members
func (call *PromoteChatMemberCall) CanRestrictMembers(canRestrictMembers bool) *PromoteChatMemberCall {
	call.request.Bool("can_restrict_members", canRestrictMembers)
	return call
}

// CanPromoteMembers Pass True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)
func (call *PromoteChatMemberCall) CanPromoteMembers(canPromoteMembers bool) *PromoteChatMemberCall {
	call.request.Bool("can_promote_members", canPromoteMembers)
	return call
}

// CanChangeInfo Pass True, if the administrator can change chat title, photo and other settings
func (call *PromoteChatMemberCall) CanChangeInfo(canChangeInfo bool) *PromoteChatMemberCall {
	call.request.Bool("can_change_info", canChangeInfo)
	return call
}

// CanInviteUsers Pass True, if the administrator can invite new users to the chat
func (call *PromoteChatMemberCall) CanInviteUsers(canInviteUsers bool) *PromoteChatMemberCall {
	call.request.Bool("can_invite_users", canInviteUsers)
	return call
}

// CanPinMessages Pass True, if the administrator can pin messages, supergroups only
func (call *PromoteChatMemberCall) CanPinMessages(canPinMessages bool) *PromoteChatMemberCall {
	call.request.Bool("can_pin_messages", canPinMessages)
	return call
}

// SetChatAdministratorCustomTitleCall reprenesents a call to the setChatAdministratorCustomTitle method.
// Use this method to set a custom title for an administrator in a supergroup promoted by the bot
type SetChatAdministratorCustomTitleCall struct {
	CallNoResult
}

// NewSetChatAdministratorCustomTitleCall constructs a new SetChatAdministratorCustomTitleCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
// userID - Unique identifier of the target user
// customTitle - New custom title for the administrator; 0-16 characters, emoji are not allowed
func NewSetChatAdministratorCustomTitleCall(chatID PeerID, userID UserID, customTitle string) *SetChatAdministratorCustomTitleCall {
	return &SetChatAdministratorCustomTitleCall{
		CallNoResult{
			request: NewRequest("setChatAdministratorCustomTitle").
				PeerID("chat_id", chatID).
				UserID("user_id", userID).
				String("custom_title", customTitle),
		},
	}
}

// SetChatAdministratorCustomTitleCall constructs a new SetChatAdministratorCustomTitleCall with required parameters.
func (client *Client) SetChatAdministratorCustomTitle(chatID PeerID, userID UserID, customTitle string) *SetChatAdministratorCustomTitleCall {
	return callWithClient(
		client,
		NewSetChatAdministratorCustomTitleCall(chatID, userID, customTitle),
	)
}

// ChatID Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
func (call *SetChatAdministratorCustomTitleCall) ChatID(chatID PeerID) *SetChatAdministratorCustomTitleCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// UserID Unique identifier of the target user
func (call *SetChatAdministratorCustomTitleCall) UserID(userID UserID) *SetChatAdministratorCustomTitleCall {
	call.request.UserID("user_id", userID)
	return call
}

// CustomTitle New custom title for the administrator; 0-16 characters, emoji are not allowed
func (call *SetChatAdministratorCustomTitleCall) CustomTitle(customTitle string) *SetChatAdministratorCustomTitleCall {
	call.request.String("custom_title", customTitle)
	return call
}

// BanChatSenderChatCall reprenesents a call to the banChatSenderChat method.
// Use this method to ban a channel chat in a supergroup or a channel
// Until the chat is unbanned, the owner of the banned chat won't be able to send messages on behalf of any of their channels
// The bot must be an administrator in the supergroup or channel for this to work and must have the appropriate administrator rights
type BanChatSenderChatCall struct {
	CallNoResult
}

// NewBanChatSenderChatCall constructs a new BanChatSenderChatCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// senderChatID - Unique identifier of the target sender chat
func NewBanChatSenderChatCall(chatID PeerID, senderChatID int) *BanChatSenderChatCall {
	return &BanChatSenderChatCall{
		CallNoResult{
			request: NewRequest("banChatSenderChat").
				PeerID("chat_id", chatID).
				Int("sender_chat_id", senderChatID),
		},
	}
}

// BanChatSenderChatCall constructs a new BanChatSenderChatCall with required parameters.
func (client *Client) BanChatSenderChat(chatID PeerID, senderChatID int) *BanChatSenderChatCall {
	return callWithClient(
		client,
		NewBanChatSenderChatCall(chatID, senderChatID),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *BanChatSenderChatCall) ChatID(chatID PeerID) *BanChatSenderChatCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// SenderChatID Unique identifier of the target sender chat
func (call *BanChatSenderChatCall) SenderChatID(senderChatID int) *BanChatSenderChatCall {
	call.request.Int("sender_chat_id", senderChatID)
	return call
}

// UnbanChatSenderChatCall reprenesents a call to the unbanChatSenderChat method.
// Use this method to unban a previously banned channel chat in a supergroup or channel
// The bot must be an administrator for this to work and must have the appropriate administrator rights
type UnbanChatSenderChatCall struct {
	CallNoResult
}

// NewUnbanChatSenderChatCall constructs a new UnbanChatSenderChatCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// senderChatID - Unique identifier of the target sender chat
func NewUnbanChatSenderChatCall(chatID PeerID, senderChatID int) *UnbanChatSenderChatCall {
	return &UnbanChatSenderChatCall{
		CallNoResult{
			request: NewRequest("unbanChatSenderChat").
				PeerID("chat_id", chatID).
				Int("sender_chat_id", senderChatID),
		},
	}
}

// UnbanChatSenderChatCall constructs a new UnbanChatSenderChatCall with required parameters.
func (client *Client) UnbanChatSenderChat(chatID PeerID, senderChatID int) *UnbanChatSenderChatCall {
	return callWithClient(
		client,
		NewUnbanChatSenderChatCall(chatID, senderChatID),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *UnbanChatSenderChatCall) ChatID(chatID PeerID) *UnbanChatSenderChatCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// SenderChatID Unique identifier of the target sender chat
func (call *UnbanChatSenderChatCall) SenderChatID(senderChatID int) *UnbanChatSenderChatCall {
	call.request.Int("sender_chat_id", senderChatID)
	return call
}

// SetChatPermissionsCall reprenesents a call to the setChatPermissions method.
// Use this method to set default chat permissions for all members
// The bot must be an administrator in the group or a supergroup for this to work and must have the can_restrict_members administrator rights
type SetChatPermissionsCall struct {
	CallNoResult
}

// NewSetChatPermissionsCall constructs a new SetChatPermissionsCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
// permissions - A JSON-serialized object for new default chat permissions
func NewSetChatPermissionsCall(chatID PeerID, permissions ChatPermissions) *SetChatPermissionsCall {
	return &SetChatPermissionsCall{
		CallNoResult{
			request: NewRequest("setChatPermissions").
				PeerID("chat_id", chatID).
				JSON("permissions", permissions),
		},
	}
}

// SetChatPermissionsCall constructs a new SetChatPermissionsCall with required parameters.
func (client *Client) SetChatPermissions(chatID PeerID, permissions ChatPermissions) *SetChatPermissionsCall {
	return callWithClient(
		client,
		NewSetChatPermissionsCall(chatID, permissions),
	)
}

// ChatID Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
func (call *SetChatPermissionsCall) ChatID(chatID PeerID) *SetChatPermissionsCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// Permissions A JSON-serialized object for new default chat permissions
func (call *SetChatPermissionsCall) Permissions(permissions ChatPermissions) *SetChatPermissionsCall {
	call.request.JSON("permissions", permissions)
	return call
}

// ExportChatInviteLinkCall reprenesents a call to the exportChatInviteLink method.
// Use this method to generate a new primary invite link for a chat; any previously generated primary link is revoked
// The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights
// Returns the new invite link as String on success.
type ExportChatInviteLinkCall struct {
	Call[string]
}

// NewExportChatInviteLinkCall constructs a new ExportChatInviteLinkCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func NewExportChatInviteLinkCall(chatID PeerID) *ExportChatInviteLinkCall {
	return &ExportChatInviteLinkCall{
		Call[string]{
			request: NewRequest("exportChatInviteLink").
				PeerID("chat_id", chatID),
		},
	}
}

// ExportChatInviteLinkCall constructs a new ExportChatInviteLinkCall with required parameters.
func (client *Client) ExportChatInviteLink(chatID PeerID) *ExportChatInviteLinkCall {
	return callWithClient(
		client,
		NewExportChatInviteLinkCall(chatID),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *ExportChatInviteLinkCall) ChatID(chatID PeerID) *ExportChatInviteLinkCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// CreateChatInviteLinkCall reprenesents a call to the createChatInviteLink method.
// Use this method to create an additional invite link for a chat
// The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights
// The link can be revoked using the method revokeChatInviteLink
// Returns the new invite link as ChatInviteLink object.
type CreateChatInviteLinkCall struct {
	Call[ChatInviteLink]
}

// NewCreateChatInviteLinkCall constructs a new CreateChatInviteLinkCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func NewCreateChatInviteLinkCall(chatID PeerID) *CreateChatInviteLinkCall {
	return &CreateChatInviteLinkCall{
		Call[ChatInviteLink]{
			request: NewRequest("createChatInviteLink").
				PeerID("chat_id", chatID),
		},
	}
}

// CreateChatInviteLinkCall constructs a new CreateChatInviteLinkCall with required parameters.
func (client *Client) CreateChatInviteLink(chatID PeerID) *CreateChatInviteLinkCall {
	return callWithClient(
		client,
		NewCreateChatInviteLinkCall(chatID),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *CreateChatInviteLinkCall) ChatID(chatID PeerID) *CreateChatInviteLinkCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// Name Invite link name; 0-32 characters
func (call *CreateChatInviteLinkCall) Name(name string) *CreateChatInviteLinkCall {
	call.request.String("name", name)
	return call
}

// ExpireDate Point in time (Unix timestamp) when the link will expire
func (call *CreateChatInviteLinkCall) ExpireDate(expireDate int) *CreateChatInviteLinkCall {
	call.request.Int("expire_date", expireDate)
	return call
}

// MemberLimit The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999
func (call *CreateChatInviteLinkCall) MemberLimit(memberLimit int) *CreateChatInviteLinkCall {
	call.request.Int("member_limit", memberLimit)
	return call
}

// CreatesJoinRequest True, if users joining the chat via the link need to be approved by chat administrators. If True, member_limit can't be specified
func (call *CreateChatInviteLinkCall) CreatesJoinRequest(createsJoinRequest bool) *CreateChatInviteLinkCall {
	call.request.Bool("creates_join_request", createsJoinRequest)
	return call
}

// EditChatInviteLinkCall reprenesents a call to the editChatInviteLink method.
// Use this method to edit a non-primary invite link created by the bot
// The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights
// Returns the edited invite link as a ChatInviteLink object.
type EditChatInviteLinkCall struct {
	Call[ChatInviteLink]
}

// NewEditChatInviteLinkCall constructs a new EditChatInviteLinkCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// inviteLink - The invite link to edit
func NewEditChatInviteLinkCall(chatID PeerID, inviteLink string) *EditChatInviteLinkCall {
	return &EditChatInviteLinkCall{
		Call[ChatInviteLink]{
			request: NewRequest("editChatInviteLink").
				PeerID("chat_id", chatID).
				String("invite_link", inviteLink),
		},
	}
}

// EditChatInviteLinkCall constructs a new EditChatInviteLinkCall with required parameters.
func (client *Client) EditChatInviteLink(chatID PeerID, inviteLink string) *EditChatInviteLinkCall {
	return callWithClient(
		client,
		NewEditChatInviteLinkCall(chatID, inviteLink),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *EditChatInviteLinkCall) ChatID(chatID PeerID) *EditChatInviteLinkCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// InviteLink The invite link to edit
func (call *EditChatInviteLinkCall) InviteLink(inviteLink string) *EditChatInviteLinkCall {
	call.request.String("invite_link", inviteLink)
	return call
}

// Name Invite link name; 0-32 characters
func (call *EditChatInviteLinkCall) Name(name string) *EditChatInviteLinkCall {
	call.request.String("name", name)
	return call
}

// ExpireDate Point in time (Unix timestamp) when the link will expire
func (call *EditChatInviteLinkCall) ExpireDate(expireDate int) *EditChatInviteLinkCall {
	call.request.Int("expire_date", expireDate)
	return call
}

// MemberLimit The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999
func (call *EditChatInviteLinkCall) MemberLimit(memberLimit int) *EditChatInviteLinkCall {
	call.request.Int("member_limit", memberLimit)
	return call
}

// CreatesJoinRequest True, if users joining the chat via the link need to be approved by chat administrators. If True, member_limit can't be specified
func (call *EditChatInviteLinkCall) CreatesJoinRequest(createsJoinRequest bool) *EditChatInviteLinkCall {
	call.request.Bool("creates_join_request", createsJoinRequest)
	return call
}

// RevokeChatInviteLinkCall reprenesents a call to the revokeChatInviteLink method.
// Use this method to revoke an invite link created by the bot
// If the primary link is revoked, a new link is automatically generated
// The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights
// Returns the revoked invite link as ChatInviteLink object.
type RevokeChatInviteLinkCall struct {
	Call[ChatInviteLink]
}

// NewRevokeChatInviteLinkCall constructs a new RevokeChatInviteLinkCall with required parameters.
// chatID - Unique identifier of the target chat or username of the target channel (in the format @channelusername)
// inviteLink - The invite link to revoke
func NewRevokeChatInviteLinkCall(chatID PeerID, inviteLink string) *RevokeChatInviteLinkCall {
	return &RevokeChatInviteLinkCall{
		Call[ChatInviteLink]{
			request: NewRequest("revokeChatInviteLink").
				PeerID("chat_id", chatID).
				String("invite_link", inviteLink),
		},
	}
}

// RevokeChatInviteLinkCall constructs a new RevokeChatInviteLinkCall with required parameters.
func (client *Client) RevokeChatInviteLink(chatID PeerID, inviteLink string) *RevokeChatInviteLinkCall {
	return callWithClient(
		client,
		NewRevokeChatInviteLinkCall(chatID, inviteLink),
	)
}

// ChatID Unique identifier of the target chat or username of the target channel (in the format @channelusername)
func (call *RevokeChatInviteLinkCall) ChatID(chatID PeerID) *RevokeChatInviteLinkCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// InviteLink The invite link to revoke
func (call *RevokeChatInviteLinkCall) InviteLink(inviteLink string) *RevokeChatInviteLinkCall {
	call.request.String("invite_link", inviteLink)
	return call
}

// ApproveChatJoinRequestCall reprenesents a call to the approveChatJoinRequest method.
// Use this method to approve a chat join request
// The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right
type ApproveChatJoinRequestCall struct {
	CallNoResult
}

// NewApproveChatJoinRequestCall constructs a new ApproveChatJoinRequestCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// userID - Unique identifier of the target user
func NewApproveChatJoinRequestCall(chatID PeerID, userID UserID) *ApproveChatJoinRequestCall {
	return &ApproveChatJoinRequestCall{
		CallNoResult{
			request: NewRequest("approveChatJoinRequest").
				PeerID("chat_id", chatID).
				UserID("user_id", userID),
		},
	}
}

// ApproveChatJoinRequestCall constructs a new ApproveChatJoinRequestCall with required parameters.
func (client *Client) ApproveChatJoinRequest(chatID PeerID, userID UserID) *ApproveChatJoinRequestCall {
	return callWithClient(
		client,
		NewApproveChatJoinRequestCall(chatID, userID),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *ApproveChatJoinRequestCall) ChatID(chatID PeerID) *ApproveChatJoinRequestCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// UserID Unique identifier of the target user
func (call *ApproveChatJoinRequestCall) UserID(userID UserID) *ApproveChatJoinRequestCall {
	call.request.UserID("user_id", userID)
	return call
}

// DeclineChatJoinRequestCall reprenesents a call to the declineChatJoinRequest method.
// Use this method to decline a chat join request
// The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right
type DeclineChatJoinRequestCall struct {
	CallNoResult
}

// NewDeclineChatJoinRequestCall constructs a new DeclineChatJoinRequestCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// userID - Unique identifier of the target user
func NewDeclineChatJoinRequestCall(chatID PeerID, userID UserID) *DeclineChatJoinRequestCall {
	return &DeclineChatJoinRequestCall{
		CallNoResult{
			request: NewRequest("declineChatJoinRequest").
				PeerID("chat_id", chatID).
				UserID("user_id", userID),
		},
	}
}

// DeclineChatJoinRequestCall constructs a new DeclineChatJoinRequestCall with required parameters.
func (client *Client) DeclineChatJoinRequest(chatID PeerID, userID UserID) *DeclineChatJoinRequestCall {
	return callWithClient(
		client,
		NewDeclineChatJoinRequestCall(chatID, userID),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *DeclineChatJoinRequestCall) ChatID(chatID PeerID) *DeclineChatJoinRequestCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// UserID Unique identifier of the target user
func (call *DeclineChatJoinRequestCall) UserID(userID UserID) *DeclineChatJoinRequestCall {
	call.request.UserID("user_id", userID)
	return call
}

// SetChatPhotoCall reprenesents a call to the setChatPhoto method.
// Use this method to set a new profile photo for the chat
// Photos can't be changed for private chats
// The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights
type SetChatPhotoCall struct {
	CallNoResult
}

// NewSetChatPhotoCall constructs a new SetChatPhotoCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// photo - New chat photo, uploaded using multipart/form-data
func NewSetChatPhotoCall(chatID PeerID, photo InputFile) *SetChatPhotoCall {
	return &SetChatPhotoCall{
		CallNoResult{
			request: NewRequest("setChatPhoto").
				PeerID("chat_id", chatID).
				JSON("photo", photo),
		},
	}
}

// SetChatPhotoCall constructs a new SetChatPhotoCall with required parameters.
func (client *Client) SetChatPhoto(chatID PeerID, photo InputFile) *SetChatPhotoCall {
	return callWithClient(
		client,
		NewSetChatPhotoCall(chatID, photo),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *SetChatPhotoCall) ChatID(chatID PeerID) *SetChatPhotoCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// Photo New chat photo, uploaded using multipart/form-data
func (call *SetChatPhotoCall) Photo(photo InputFile) *SetChatPhotoCall {
	call.request.JSON("photo", photo)
	return call
}

// DeleteChatPhotoCall reprenesents a call to the deleteChatPhoto method.
// Use this method to delete a chat photo
// Photos can't be changed for private chats
// The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights
type DeleteChatPhotoCall struct {
	CallNoResult
}

// NewDeleteChatPhotoCall constructs a new DeleteChatPhotoCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func NewDeleteChatPhotoCall(chatID PeerID) *DeleteChatPhotoCall {
	return &DeleteChatPhotoCall{
		CallNoResult{
			request: NewRequest("deleteChatPhoto").
				PeerID("chat_id", chatID),
		},
	}
}

// DeleteChatPhotoCall constructs a new DeleteChatPhotoCall with required parameters.
func (client *Client) DeleteChatPhoto(chatID PeerID) *DeleteChatPhotoCall {
	return callWithClient(
		client,
		NewDeleteChatPhotoCall(chatID),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *DeleteChatPhotoCall) ChatID(chatID PeerID) *DeleteChatPhotoCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// SetChatTitleCall reprenesents a call to the setChatTitle method.
// Use this method to change the title of a chat
// Titles can't be changed for private chats
// The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights
type SetChatTitleCall struct {
	CallNoResult
}

// NewSetChatTitleCall constructs a new SetChatTitleCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// title - New chat title, 1-255 characters
func NewSetChatTitleCall(chatID PeerID, title string) *SetChatTitleCall {
	return &SetChatTitleCall{
		CallNoResult{
			request: NewRequest("setChatTitle").
				PeerID("chat_id", chatID).
				String("title", title),
		},
	}
}

// SetChatTitleCall constructs a new SetChatTitleCall with required parameters.
func (client *Client) SetChatTitle(chatID PeerID, title string) *SetChatTitleCall {
	return callWithClient(
		client,
		NewSetChatTitleCall(chatID, title),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *SetChatTitleCall) ChatID(chatID PeerID) *SetChatTitleCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// Title New chat title, 1-255 characters
func (call *SetChatTitleCall) Title(title string) *SetChatTitleCall {
	call.request.String("title", title)
	return call
}

// SetChatDescriptionCall reprenesents a call to the setChatDescription method.
// Use this method to change the description of a group, a supergroup or a channel
// The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights
type SetChatDescriptionCall struct {
	CallNoResult
}

// NewSetChatDescriptionCall constructs a new SetChatDescriptionCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func NewSetChatDescriptionCall(chatID PeerID) *SetChatDescriptionCall {
	return &SetChatDescriptionCall{
		CallNoResult{
			request: NewRequest("setChatDescription").
				PeerID("chat_id", chatID),
		},
	}
}

// SetChatDescriptionCall constructs a new SetChatDescriptionCall with required parameters.
func (client *Client) SetChatDescription(chatID PeerID) *SetChatDescriptionCall {
	return callWithClient(
		client,
		NewSetChatDescriptionCall(chatID),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *SetChatDescriptionCall) ChatID(chatID PeerID) *SetChatDescriptionCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// Description New chat description, 0-255 characters
func (call *SetChatDescriptionCall) Description(description string) *SetChatDescriptionCall {
	call.request.String("description", description)
	return call
}

// PinChatMessageCall reprenesents a call to the pinChatMessage method.
// Use this method to add a message to the list of pinned messages in a chat
// If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel
type PinChatMessageCall struct {
	CallNoResult
}

// NewPinChatMessageCall constructs a new PinChatMessageCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// messageID - Identifier of a message to pin
func NewPinChatMessageCall(chatID PeerID, messageID int) *PinChatMessageCall {
	return &PinChatMessageCall{
		CallNoResult{
			request: NewRequest("pinChatMessage").
				PeerID("chat_id", chatID).
				Int("message_id", messageID),
		},
	}
}

// PinChatMessageCall constructs a new PinChatMessageCall with required parameters.
func (client *Client) PinChatMessage(chatID PeerID, messageID int) *PinChatMessageCall {
	return callWithClient(
		client,
		NewPinChatMessageCall(chatID, messageID),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *PinChatMessageCall) ChatID(chatID PeerID) *PinChatMessageCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// MessageID Identifier of a message to pin
func (call *PinChatMessageCall) MessageID(messageID int) *PinChatMessageCall {
	call.request.Int("message_id", messageID)
	return call
}

// DisableNotification Pass True, if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats.
func (call *PinChatMessageCall) DisableNotification(disableNotification bool) *PinChatMessageCall {
	call.request.Bool("disable_notification", disableNotification)
	return call
}

// UnpinChatMessageCall reprenesents a call to the unpinChatMessage method.
// Use this method to remove a message from the list of pinned messages in a chat
// If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel
type UnpinChatMessageCall struct {
	CallNoResult
}

// NewUnpinChatMessageCall constructs a new UnpinChatMessageCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func NewUnpinChatMessageCall(chatID PeerID) *UnpinChatMessageCall {
	return &UnpinChatMessageCall{
		CallNoResult{
			request: NewRequest("unpinChatMessage").
				PeerID("chat_id", chatID),
		},
	}
}

// UnpinChatMessageCall constructs a new UnpinChatMessageCall with required parameters.
func (client *Client) UnpinChatMessage(chatID PeerID) *UnpinChatMessageCall {
	return callWithClient(
		client,
		NewUnpinChatMessageCall(chatID),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *UnpinChatMessageCall) ChatID(chatID PeerID) *UnpinChatMessageCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// MessageID Identifier of a message to unpin. If not specified, the most recent pinned message (by sending date) will be unpinned.
func (call *UnpinChatMessageCall) MessageID(messageID int) *UnpinChatMessageCall {
	call.request.Int("message_id", messageID)
	return call
}

// UnpinAllChatMessagesCall reprenesents a call to the unpinAllChatMessages method.
// Use this method to clear the list of pinned messages in a chat
// If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel
type UnpinAllChatMessagesCall struct {
	CallNoResult
}

// NewUnpinAllChatMessagesCall constructs a new UnpinAllChatMessagesCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func NewUnpinAllChatMessagesCall(chatID PeerID) *UnpinAllChatMessagesCall {
	return &UnpinAllChatMessagesCall{
		CallNoResult{
			request: NewRequest("unpinAllChatMessages").
				PeerID("chat_id", chatID),
		},
	}
}

// UnpinAllChatMessagesCall constructs a new UnpinAllChatMessagesCall with required parameters.
func (client *Client) UnpinAllChatMessages(chatID PeerID) *UnpinAllChatMessagesCall {
	return callWithClient(
		client,
		NewUnpinAllChatMessagesCall(chatID),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *UnpinAllChatMessagesCall) ChatID(chatID PeerID) *UnpinAllChatMessagesCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// LeaveChatCall reprenesents a call to the leaveChat method.
// Use this method for your bot to leave a group, supergroup or channel
type LeaveChatCall struct {
	CallNoResult
}

// NewLeaveChatCall constructs a new LeaveChatCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)
func NewLeaveChatCall(chatID PeerID) *LeaveChatCall {
	return &LeaveChatCall{
		CallNoResult{
			request: NewRequest("leaveChat").
				PeerID("chat_id", chatID),
		},
	}
}

// LeaveChatCall constructs a new LeaveChatCall with required parameters.
func (client *Client) LeaveChat(chatID PeerID) *LeaveChatCall {
	return callWithClient(
		client,
		NewLeaveChatCall(chatID),
	)
}

// ChatID Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)
func (call *LeaveChatCall) ChatID(chatID PeerID) *LeaveChatCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// GetChatCall reprenesents a call to the getChat method.
// Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.)
// Returns a Chat object on success.
type GetChatCall struct {
	Call[Chat]
}

// NewGetChatCall constructs a new GetChatCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)
func NewGetChatCall(chatID PeerID) *GetChatCall {
	return &GetChatCall{
		Call[Chat]{
			request: NewRequest("getChat").
				PeerID("chat_id", chatID),
		},
	}
}

// GetChatCall constructs a new GetChatCall with required parameters.
func (client *Client) GetChat(chatID PeerID) *GetChatCall {
	return callWithClient(
		client,
		NewGetChatCall(chatID),
	)
}

// ChatID Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)
func (call *GetChatCall) ChatID(chatID PeerID) *GetChatCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// GetChatAdministratorsCall reprenesents a call to the getChatAdministrators method.
// Use this method to get a list of administrators in a chat
// On success, returns an Array of ChatMember objects that contains information about all chat administrators except other bots
// If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned.
type GetChatAdministratorsCall struct {
	Call[[]ChatMember]
}

// NewGetChatAdministratorsCall constructs a new GetChatAdministratorsCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)
func NewGetChatAdministratorsCall(chatID PeerID) *GetChatAdministratorsCall {
	return &GetChatAdministratorsCall{
		Call[[]ChatMember]{
			request: NewRequest("getChatAdministrators").
				PeerID("chat_id", chatID),
		},
	}
}

// GetChatAdministratorsCall constructs a new GetChatAdministratorsCall with required parameters.
func (client *Client) GetChatAdministrators(chatID PeerID) *GetChatAdministratorsCall {
	return callWithClient(
		client,
		NewGetChatAdministratorsCall(chatID),
	)
}

// ChatID Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)
func (call *GetChatAdministratorsCall) ChatID(chatID PeerID) *GetChatAdministratorsCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// GetChatMemberCountCall reprenesents a call to the getChatMemberCount method.
// Use this method to get the number of members in a chat
// Returns Int on success.
type GetChatMemberCountCall struct {
	Call[int]
}

// NewGetChatMemberCountCall constructs a new GetChatMemberCountCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)
func NewGetChatMemberCountCall(chatID PeerID) *GetChatMemberCountCall {
	return &GetChatMemberCountCall{
		Call[int]{
			request: NewRequest("getChatMemberCount").
				PeerID("chat_id", chatID),
		},
	}
}

// GetChatMemberCountCall constructs a new GetChatMemberCountCall with required parameters.
func (client *Client) GetChatMemberCount(chatID PeerID) *GetChatMemberCountCall {
	return callWithClient(
		client,
		NewGetChatMemberCountCall(chatID),
	)
}

// ChatID Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)
func (call *GetChatMemberCountCall) ChatID(chatID PeerID) *GetChatMemberCountCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// GetChatMemberCall reprenesents a call to the getChatMember method.
// Use this method to get information about a member of a chat
// Returns a ChatMember object on success.
type GetChatMemberCall struct {
	Call[ChatMember]
}

// NewGetChatMemberCall constructs a new GetChatMemberCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)
// userID - Unique identifier of the target user
func NewGetChatMemberCall(chatID PeerID, userID UserID) *GetChatMemberCall {
	return &GetChatMemberCall{
		Call[ChatMember]{
			request: NewRequest("getChatMember").
				PeerID("chat_id", chatID).
				UserID("user_id", userID),
		},
	}
}

// GetChatMemberCall constructs a new GetChatMemberCall with required parameters.
func (client *Client) GetChatMember(chatID PeerID, userID UserID) *GetChatMemberCall {
	return callWithClient(
		client,
		NewGetChatMemberCall(chatID, userID),
	)
}

// ChatID Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)
func (call *GetChatMemberCall) ChatID(chatID PeerID) *GetChatMemberCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// UserID Unique identifier of the target user
func (call *GetChatMemberCall) UserID(userID UserID) *GetChatMemberCall {
	call.request.UserID("user_id", userID)
	return call
}

// SetChatStickerSetCall reprenesents a call to the setChatStickerSet method.
// Use this method to set a new group sticker set for a supergroup
// The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights
// Use the field can_set_sticker_set optionally returned in getChat requests to check if the bot can use this method
type SetChatStickerSetCall struct {
	CallNoResult
}

// NewSetChatStickerSetCall constructs a new SetChatStickerSetCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
// stickerSetName - Name of the sticker set to be set as the group sticker set
func NewSetChatStickerSetCall(chatID PeerID, stickerSetName string) *SetChatStickerSetCall {
	return &SetChatStickerSetCall{
		CallNoResult{
			request: NewRequest("setChatStickerSet").
				PeerID("chat_id", chatID).
				String("sticker_set_name", stickerSetName),
		},
	}
}

// SetChatStickerSetCall constructs a new SetChatStickerSetCall with required parameters.
func (client *Client) SetChatStickerSet(chatID PeerID, stickerSetName string) *SetChatStickerSetCall {
	return callWithClient(
		client,
		NewSetChatStickerSetCall(chatID, stickerSetName),
	)
}

// ChatID Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
func (call *SetChatStickerSetCall) ChatID(chatID PeerID) *SetChatStickerSetCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// StickerSetName Name of the sticker set to be set as the group sticker set
func (call *SetChatStickerSetCall) StickerSetName(stickerSetName string) *SetChatStickerSetCall {
	call.request.String("sticker_set_name", stickerSetName)
	return call
}

// DeleteChatStickerSetCall reprenesents a call to the deleteChatStickerSet method.
// Use this method to delete a group sticker set from a supergroup
// The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights
// Use the field can_set_sticker_set optionally returned in getChat requests to check if the bot can use this method
type DeleteChatStickerSetCall struct {
	CallNoResult
}

// NewDeleteChatStickerSetCall constructs a new DeleteChatStickerSetCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
func NewDeleteChatStickerSetCall(chatID PeerID) *DeleteChatStickerSetCall {
	return &DeleteChatStickerSetCall{
		CallNoResult{
			request: NewRequest("deleteChatStickerSet").
				PeerID("chat_id", chatID),
		},
	}
}

// DeleteChatStickerSetCall constructs a new DeleteChatStickerSetCall with required parameters.
func (client *Client) DeleteChatStickerSet(chatID PeerID) *DeleteChatStickerSetCall {
	return callWithClient(
		client,
		NewDeleteChatStickerSetCall(chatID),
	)
}

// ChatID Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
func (call *DeleteChatStickerSetCall) ChatID(chatID PeerID) *DeleteChatStickerSetCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// AnswerCallbackQueryCall reprenesents a call to the answerCallbackQuery method.
// Use this method to send answers to callback queries sent from inline keyboards
// The answer will be displayed to the user as a notification at the top of the chat screen or as an alert
// On success, True is returned.
// Alternatively, the user can be redirected to the specified Game URL
// For this option to work, you must first create a game for your bot via @BotFather and accept the terms
// Otherwise, you may use links like t.me/your_bot?start=XXXX that open your bot with a parameter.
type AnswerCallbackQueryCall struct {
	CallNoResult
}

// NewAnswerCallbackQueryCall constructs a new AnswerCallbackQueryCall with required parameters.
// callbackQueryID - Unique identifier for the query to be answered
func NewAnswerCallbackQueryCall(callbackQueryID string) *AnswerCallbackQueryCall {
	return &AnswerCallbackQueryCall{
		CallNoResult{
			request: NewRequest("answerCallbackQuery").
				String("callback_query_id", callbackQueryID),
		},
	}
}

// AnswerCallbackQueryCall constructs a new AnswerCallbackQueryCall with required parameters.
func (client *Client) AnswerCallbackQuery(callbackQueryID string) *AnswerCallbackQueryCall {
	return callWithClient(
		client,
		NewAnswerCallbackQueryCall(callbackQueryID),
	)
}

// CallbackQueryID Unique identifier for the query to be answered
func (call *AnswerCallbackQueryCall) CallbackQueryID(callbackQueryID string) *AnswerCallbackQueryCall {
	call.request.String("callback_query_id", callbackQueryID)
	return call
}

// Text Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters
func (call *AnswerCallbackQueryCall) Text(text string) *AnswerCallbackQueryCall {
	call.request.String("text", text)
	return call
}

// ShowAlert If True, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to false.
func (call *AnswerCallbackQueryCall) ShowAlert(showAlert bool) *AnswerCallbackQueryCall {
	call.request.Bool("show_alert", showAlert)
	return call
}

// URL URL that will be opened by the user's client. If you have created a Game and accepted the conditions via @BotFather, specify the URL that opens your game - note that this will only work if the query comes from a callback_game button.Otherwise, you may use links like t.me/your_bot?start=XXXX that open your bot with a parameter.
func (call *AnswerCallbackQueryCall) URL(url string) *AnswerCallbackQueryCall {
	call.request.String("url", url)
	return call
}

// CacheTime The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.
func (call *AnswerCallbackQueryCall) CacheTime(cacheTime int) *AnswerCallbackQueryCall {
	call.request.Int("cache_time", cacheTime)
	return call
}

// SetMyCommandsCall reprenesents a call to the setMyCommands method.
// Use this method to change the list of the bot's commands
// See https://core.telegram.org/bots#commands for more details about bot commands
type SetMyCommandsCall struct {
	CallNoResult
}

// NewSetMyCommandsCall constructs a new SetMyCommandsCall with required parameters.
// commands - A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified.
func NewSetMyCommandsCall(commands []BotCommand) *SetMyCommandsCall {
	return &SetMyCommandsCall{
		CallNoResult{
			request: NewRequest("setMyCommands").
				JSON("commands", commands),
		},
	}
}

// SetMyCommandsCall constructs a new SetMyCommandsCall with required parameters.
func (client *Client) SetMyCommands(commands []BotCommand) *SetMyCommandsCall {
	return callWithClient(
		client,
		NewSetMyCommandsCall(commands),
	)
}

// Commands A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified.
func (call *SetMyCommandsCall) Commands(commands []BotCommand) *SetMyCommandsCall {
	call.request.JSON("commands", commands)
	return call
}

// Scope A JSON-serialized object, describing scope of users for which the commands are relevant. Defaults to BotCommandScopeDefault.
func (call *SetMyCommandsCall) Scope(scope BotCommandScope) *SetMyCommandsCall {
	call.request.JSON("scope", scope)
	return call
}

// LanguageCode A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands
func (call *SetMyCommandsCall) LanguageCode(languageCode string) *SetMyCommandsCall {
	call.request.String("language_code", languageCode)
	return call
}

// DeleteMyCommandsCall reprenesents a call to the deleteMyCommands method.
// Use this method to delete the list of the bot's commands for the given scope and user language
// After deletion, higher level commands will be shown to affected users
type DeleteMyCommandsCall struct {
	CallNoResult
}

// NewDeleteMyCommandsCall constructs a new DeleteMyCommandsCall with required parameters.
func NewDeleteMyCommandsCall() *DeleteMyCommandsCall {
	return &DeleteMyCommandsCall{
		CallNoResult{
			request: NewRequest("deleteMyCommands"),
		},
	}
}

// DeleteMyCommandsCall constructs a new DeleteMyCommandsCall with required parameters.
func (client *Client) DeleteMyCommands() *DeleteMyCommandsCall {
	return callWithClient(
		client,
		NewDeleteMyCommandsCall(),
	)
}

// Scope A JSON-serialized object, describing scope of users for which the commands are relevant. Defaults to BotCommandScopeDefault.
func (call *DeleteMyCommandsCall) Scope(scope BotCommandScope) *DeleteMyCommandsCall {
	call.request.JSON("scope", scope)
	return call
}

// LanguageCode A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands
func (call *DeleteMyCommandsCall) LanguageCode(languageCode string) *DeleteMyCommandsCall {
	call.request.String("language_code", languageCode)
	return call
}

// GetMyCommandsCall reprenesents a call to the getMyCommands method.
// Use this method to get the current list of the bot's commands for the given scope and user language
// Returns Array of BotCommand on success
// If commands aren't set, an empty list is returned.
type GetMyCommandsCall struct {
	Call[[]BotCommand]
}

// NewGetMyCommandsCall constructs a new GetMyCommandsCall with required parameters.
func NewGetMyCommandsCall() *GetMyCommandsCall {
	return &GetMyCommandsCall{
		Call[[]BotCommand]{
			request: NewRequest("getMyCommands"),
		},
	}
}

// GetMyCommandsCall constructs a new GetMyCommandsCall with required parameters.
func (client *Client) GetMyCommands() *GetMyCommandsCall {
	return callWithClient(
		client,
		NewGetMyCommandsCall(),
	)
}

// Scope A JSON-serialized object, describing scope of users. Defaults to BotCommandScopeDefault.
func (call *GetMyCommandsCall) Scope(scope BotCommandScope) *GetMyCommandsCall {
	call.request.JSON("scope", scope)
	return call
}

// LanguageCode A two-letter ISO 639-1 language code or an empty string
func (call *GetMyCommandsCall) LanguageCode(languageCode string) *GetMyCommandsCall {
	call.request.String("language_code", languageCode)
	return call
}

// SetChatMenuButtonCall reprenesents a call to the setChatMenuButton method.
// Use this method to change the bot's menu button in a private chat, or the default menu button
type SetChatMenuButtonCall struct {
	CallNoResult
}

// NewSetChatMenuButtonCall constructs a new SetChatMenuButtonCall with required parameters.
func NewSetChatMenuButtonCall() *SetChatMenuButtonCall {
	return &SetChatMenuButtonCall{
		CallNoResult{
			request: NewRequest("setChatMenuButton"),
		},
	}
}

// SetChatMenuButtonCall constructs a new SetChatMenuButtonCall with required parameters.
func (client *Client) SetChatMenuButton() *SetChatMenuButtonCall {
	return callWithClient(
		client,
		NewSetChatMenuButtonCall(),
	)
}

// ChatID Unique identifier for the target private chat. If not specified, default bot's menu button will be changed
func (call *SetChatMenuButtonCall) ChatID(chatID ChatID) *SetChatMenuButtonCall {
	call.request.ChatID("chat_id", chatID)
	return call
}

// MenuButton A JSON-serialized object for the bot's new menu button. Defaults to MenuButtonDefault
func (call *SetChatMenuButtonCall) MenuButton(menuButton MenuButton) *SetChatMenuButtonCall {
	call.request.JSON("menu_button", menuButton)
	return call
}

// GetChatMenuButtonCall reprenesents a call to the getChatMenuButton method.
// Use this method to get the current value of the bot's menu button in a private chat, or the default menu button
// Returns MenuButton on success.
type GetChatMenuButtonCall struct {
	Call[MenuButton]
}

// NewGetChatMenuButtonCall constructs a new GetChatMenuButtonCall with required parameters.
func NewGetChatMenuButtonCall() *GetChatMenuButtonCall {
	return &GetChatMenuButtonCall{
		Call[MenuButton]{
			request: NewRequest("getChatMenuButton"),
		},
	}
}

// GetChatMenuButtonCall constructs a new GetChatMenuButtonCall with required parameters.
func (client *Client) GetChatMenuButton() *GetChatMenuButtonCall {
	return callWithClient(
		client,
		NewGetChatMenuButtonCall(),
	)
}

// ChatID Unique identifier for the target private chat. If not specified, default bot's menu button will be returned
func (call *GetChatMenuButtonCall) ChatID(chatID ChatID) *GetChatMenuButtonCall {
	call.request.ChatID("chat_id", chatID)
	return call
}

// SetMyDefaultAdministratorRightsCall reprenesents a call to the setMyDefaultAdministratorRights method.
// Use this method to change the default administrator rights requested by the bot when it's added as an administrator to groups or channels
// These rights will be suggested to users, but they are are free to modify the list before adding the bot
type SetMyDefaultAdministratorRightsCall struct {
	CallNoResult
}

// NewSetMyDefaultAdministratorRightsCall constructs a new SetMyDefaultAdministratorRightsCall with required parameters.
func NewSetMyDefaultAdministratorRightsCall() *SetMyDefaultAdministratorRightsCall {
	return &SetMyDefaultAdministratorRightsCall{
		CallNoResult{
			request: NewRequest("setMyDefaultAdministratorRights"),
		},
	}
}

// SetMyDefaultAdministratorRightsCall constructs a new SetMyDefaultAdministratorRightsCall with required parameters.
func (client *Client) SetMyDefaultAdministratorRights() *SetMyDefaultAdministratorRightsCall {
	return callWithClient(
		client,
		NewSetMyDefaultAdministratorRightsCall(),
	)
}

// Rights A JSON-serialized object describing new default administrator rights. If not specified, the default administrator rights will be cleared.
func (call *SetMyDefaultAdministratorRightsCall) Rights(rights ChatAdministratorRights) *SetMyDefaultAdministratorRightsCall {
	call.request.JSON("rights", rights)
	return call
}

// ForChannels Pass True to change the default administrator rights of the bot in channels. Otherwise, the default administrator rights of the bot for groups and supergroups will be changed.
func (call *SetMyDefaultAdministratorRightsCall) ForChannels(forChannels bool) *SetMyDefaultAdministratorRightsCall {
	call.request.Bool("for_channels", forChannels)
	return call
}

// GetMyDefaultAdministratorRightsCall reprenesents a call to the getMyDefaultAdministratorRights method.
// Use this method to get the current default administrator rights of the bot
// Returns ChatAdministratorRights on success.
type GetMyDefaultAdministratorRightsCall struct {
	Call[ChatAdministratorRights]
}

// NewGetMyDefaultAdministratorRightsCall constructs a new GetMyDefaultAdministratorRightsCall with required parameters.
func NewGetMyDefaultAdministratorRightsCall() *GetMyDefaultAdministratorRightsCall {
	return &GetMyDefaultAdministratorRightsCall{
		Call[ChatAdministratorRights]{
			request: NewRequest("getMyDefaultAdministratorRights"),
		},
	}
}

// GetMyDefaultAdministratorRightsCall constructs a new GetMyDefaultAdministratorRightsCall with required parameters.
func (client *Client) GetMyDefaultAdministratorRights() *GetMyDefaultAdministratorRightsCall {
	return callWithClient(
		client,
		NewGetMyDefaultAdministratorRightsCall(),
	)
}

// ForChannels Pass True to get default administrator rights of the bot in channels. Otherwise, default administrator rights of the bot for groups and supergroups will be returned.
func (call *GetMyDefaultAdministratorRightsCall) ForChannels(forChannels bool) *GetMyDefaultAdministratorRightsCall {
	call.request.Bool("for_channels", forChannels)
	return call
}

// EditMessageTextCall reprenesents a call to the editMessageText method.
// Use this method to edit text and game messages
// On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.
type EditMessageTextCall struct {
	Call[Message]
}

// NewEditMessageTextCall constructs a new EditMessageTextCall with required parameters.
// chatID - Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// messageID - Required if inline_message_id is not specified. Identifier of the message to edit
// text - New text of the message, 1-4096 characters after entities parsing
func NewEditMessageTextCall(chatID PeerID, messageID int, text string) *EditMessageTextCall {
	return &EditMessageTextCall{
		Call[Message]{
			request: NewRequest("editMessageText").
				PeerID("chat_id", chatID).
				Int("message_id", messageID).
				String("text", text),
		},
	}
}

// NewEditMessageTextCall constructs a new EditMessageTextCall with required parameters.
// inlineMessageID - Required if chat_id and message_id are not specified. Identifier of the inline message
// text - New text of the message, 1-4096 characters after entities parsing
func NewEditMessageTextInlineCall(inlineMessageID string, text string) *EditMessageTextCall {
	return &EditMessageTextCall{
		Call[Message]{
			request: NewRequest("editMessageText").
				String("inline_message_id", inlineMessageID).
				String("text", text),
		},
	}
}

// EditMessageTextCall constructs a new EditMessageTextCall with required parameters.
func (client *Client) EditMessageText(chatID PeerID, messageID int, text string) *EditMessageTextCall {
	return callWithClient(
		client,
		NewEditMessageTextCall(chatID, messageID, text),
	)
}

// EditMessageTextCall constructs a new EditMessageTextCall with required parameters.
func (client *Client) EditMessageTextInline(inlineMessageID string, text string) *EditMessageTextCall {
	return callWithClient(
		client,
		NewEditMessageTextInlineCall(inlineMessageID, text),
	)
}

// ChatID Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *EditMessageTextCall) ChatID(chatID PeerID) *EditMessageTextCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// MessageID Required if inline_message_id is not specified. Identifier of the message to edit
func (call *EditMessageTextCall) MessageID(messageID int) *EditMessageTextCall {
	call.request.Int("message_id", messageID)
	return call
}

// InlineMessageID Required if chat_id and message_id are not specified. Identifier of the inline message
func (call *EditMessageTextCall) InlineMessageID(inlineMessageID string) *EditMessageTextCall {
	call.request.String("inline_message_id", inlineMessageID)
	return call
}

// Text New text of the message, 1-4096 characters after entities parsing
func (call *EditMessageTextCall) Text(text string) *EditMessageTextCall {
	call.request.String("text", text)
	return call
}

// ParseMode Mode for parsing entities in the message text. See formatting options for more details.
func (call *EditMessageTextCall) ParseMode(parseMode ParseMode) *EditMessageTextCall {
	call.request.Stringer("parse_mode", parseMode)
	return call
}

// Entities A JSON-serialized list of special entities that appear in message text, which can be specified instead of parse_mode
func (call *EditMessageTextCall) Entities(entities []MessageEntity) *EditMessageTextCall {
	call.request.JSON("entities", entities)
	return call
}

// DisableWebPagePreview Disables link previews for links in this message
func (call *EditMessageTextCall) DisableWebPagePreview(disableWebPagePreview bool) *EditMessageTextCall {
	call.request.Bool("disable_web_page_preview", disableWebPagePreview)
	return call
}

// ReplyMarkup A JSON-serialized object for an inline keyboard.
func (call *EditMessageTextCall) ReplyMarkup(replyMarkup InlineKeyboardMarkup) *EditMessageTextCall {
	call.request.JSON("reply_markup", replyMarkup)
	return call
}

// EditMessageCaptionCall reprenesents a call to the editMessageCaption method.
// Use this method to edit captions of messages
// On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.
type EditMessageCaptionCall struct {
	Call[Message]
}

// NewEditMessageCaptionCall constructs a new EditMessageCaptionCall with required parameters.
// chatID - Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// messageID - Required if inline_message_id is not specified. Identifier of the message to edit
// caption - New caption of the message, 0-1024 characters after entities parsing
func NewEditMessageCaptionCall(chatID PeerID, messageID int, caption string) *EditMessageCaptionCall {
	return &EditMessageCaptionCall{
		Call[Message]{
			request: NewRequest("editMessageCaption").
				PeerID("chat_id", chatID).
				Int("message_id", messageID).
				String("caption", caption),
		},
	}
}

// NewEditMessageCaptionCall constructs a new EditMessageCaptionCall with required parameters.
// inlineMessageID - Required if chat_id and message_id are not specified. Identifier of the inline message
// caption - New caption of the message, 0-1024 characters after entities parsing
func NewEditMessageCaptionInlineCall(inlineMessageID string, caption string) *EditMessageCaptionCall {
	return &EditMessageCaptionCall{
		Call[Message]{
			request: NewRequest("editMessageCaption").
				String("inline_message_id", inlineMessageID).
				String("caption", caption),
		},
	}
}

// EditMessageCaptionCall constructs a new EditMessageCaptionCall with required parameters.
func (client *Client) EditMessageCaption(chatID PeerID, messageID int, caption string) *EditMessageCaptionCall {
	return callWithClient(
		client,
		NewEditMessageCaptionCall(chatID, messageID, caption),
	)
}

// EditMessageCaptionCall constructs a new EditMessageCaptionCall with required parameters.
func (client *Client) EditMessageCaptionInline(inlineMessageID string, caption string) *EditMessageCaptionCall {
	return callWithClient(
		client,
		NewEditMessageCaptionInlineCall(inlineMessageID, caption),
	)
}

// ChatID Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *EditMessageCaptionCall) ChatID(chatID PeerID) *EditMessageCaptionCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// MessageID Required if inline_message_id is not specified. Identifier of the message to edit
func (call *EditMessageCaptionCall) MessageID(messageID int) *EditMessageCaptionCall {
	call.request.Int("message_id", messageID)
	return call
}

// InlineMessageID Required if chat_id and message_id are not specified. Identifier of the inline message
func (call *EditMessageCaptionCall) InlineMessageID(inlineMessageID string) *EditMessageCaptionCall {
	call.request.String("inline_message_id", inlineMessageID)
	return call
}

// Caption New caption of the message, 0-1024 characters after entities parsing
func (call *EditMessageCaptionCall) Caption(caption string) *EditMessageCaptionCall {
	call.request.String("caption", caption)
	return call
}

// ParseMode Mode for parsing entities in the message caption. See formatting options for more details.
func (call *EditMessageCaptionCall) ParseMode(parseMode ParseMode) *EditMessageCaptionCall {
	call.request.Stringer("parse_mode", parseMode)
	return call
}

// CaptionEntities A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode
func (call *EditMessageCaptionCall) CaptionEntities(captionEntities []MessageEntity) *EditMessageCaptionCall {
	call.request.JSON("caption_entities", captionEntities)
	return call
}

// ReplyMarkup A JSON-serialized object for an inline keyboard.
func (call *EditMessageCaptionCall) ReplyMarkup(replyMarkup InlineKeyboardMarkup) *EditMessageCaptionCall {
	call.request.JSON("reply_markup", replyMarkup)
	return call
}

// EditMessageMediaCall reprenesents a call to the editMessageMedia method.
// Use this method to edit animation, audio, document, photo, or video messages
// If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise
// When an inline message is edited, a new file can't be uploaded; use a previously uploaded file via its file_id or specify a URL
// On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.
type EditMessageMediaCall struct {
	Call[Message]
}

// NewEditMessageMediaCall constructs a new EditMessageMediaCall with required parameters.
// media - A JSON-serialized object for a new media content of the message
func NewEditMessageMediaCall(media InputMedia) *EditMessageMediaCall {
	return &EditMessageMediaCall{
		Call[Message]{
			request: NewRequest("editMessageMedia").
				JSON("media", media),
		},
	}
}

// EditMessageMediaCall constructs a new EditMessageMediaCall with required parameters.
func (client *Client) EditMessageMedia(media InputMedia) *EditMessageMediaCall {
	return callWithClient(
		client,
		NewEditMessageMediaCall(media),
	)
}

// ChatID Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *EditMessageMediaCall) ChatID(chatID PeerID) *EditMessageMediaCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// MessageID Required if inline_message_id is not specified. Identifier of the message to edit
func (call *EditMessageMediaCall) MessageID(messageID int) *EditMessageMediaCall {
	call.request.Int("message_id", messageID)
	return call
}

// InlineMessageID Required if chat_id and message_id are not specified. Identifier of the inline message
func (call *EditMessageMediaCall) InlineMessageID(inlineMessageID string) *EditMessageMediaCall {
	call.request.String("inline_message_id", inlineMessageID)
	return call
}

// Media A JSON-serialized object for a new media content of the message
func (call *EditMessageMediaCall) Media(media InputMedia) *EditMessageMediaCall {
	call.request.JSON("media", media)
	return call
}

// ReplyMarkup A JSON-serialized object for a new inline keyboard.
func (call *EditMessageMediaCall) ReplyMarkup(replyMarkup InlineKeyboardMarkup) *EditMessageMediaCall {
	call.request.JSON("reply_markup", replyMarkup)
	return call
}

// EditMessageReplyMarkupCall reprenesents a call to the editMessageReplyMarkup method.
// Use this method to edit only the reply markup of messages
// On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.
type EditMessageReplyMarkupCall struct {
	Call[Message]
}

// NewEditMessageReplyMarkupCall constructs a new EditMessageReplyMarkupCall with required parameters.
// chatID - Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// messageID - Required if inline_message_id is not specified. Identifier of the message to edit
func NewEditMessageReplyMarkupCall(chatID PeerID, messageID int) *EditMessageReplyMarkupCall {
	return &EditMessageReplyMarkupCall{
		Call[Message]{
			request: NewRequest("editMessageReplyMarkup").
				PeerID("chat_id", chatID).
				Int("message_id", messageID),
		},
	}
}

// NewEditMessageReplyMarkupCall constructs a new EditMessageReplyMarkupCall with required parameters.
// inlineMessageID - Required if chat_id and message_id are not specified. Identifier of the inline message
func NewEditMessageReplyMarkupInlineCall(inlineMessageID string) *EditMessageReplyMarkupCall {
	return &EditMessageReplyMarkupCall{
		Call[Message]{
			request: NewRequest("editMessageReplyMarkup").
				String("inline_message_id", inlineMessageID),
		},
	}
}

// EditMessageReplyMarkupCall constructs a new EditMessageReplyMarkupCall with required parameters.
func (client *Client) EditMessageReplyMarkup(chatID PeerID, messageID int) *EditMessageReplyMarkupCall {
	return callWithClient(
		client,
		NewEditMessageReplyMarkupCall(chatID, messageID),
	)
}

// EditMessageReplyMarkupCall constructs a new EditMessageReplyMarkupCall with required parameters.
func (client *Client) EditMessageReplyMarkupInline(inlineMessageID string) *EditMessageReplyMarkupCall {
	return callWithClient(
		client,
		NewEditMessageReplyMarkupInlineCall(inlineMessageID),
	)
}

// ChatID Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *EditMessageReplyMarkupCall) ChatID(chatID PeerID) *EditMessageReplyMarkupCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// MessageID Required if inline_message_id is not specified. Identifier of the message to edit
func (call *EditMessageReplyMarkupCall) MessageID(messageID int) *EditMessageReplyMarkupCall {
	call.request.Int("message_id", messageID)
	return call
}

// InlineMessageID Required if chat_id and message_id are not specified. Identifier of the inline message
func (call *EditMessageReplyMarkupCall) InlineMessageID(inlineMessageID string) *EditMessageReplyMarkupCall {
	call.request.String("inline_message_id", inlineMessageID)
	return call
}

// ReplyMarkup A JSON-serialized object for an inline keyboard.
func (call *EditMessageReplyMarkupCall) ReplyMarkup(replyMarkup InlineKeyboardMarkup) *EditMessageReplyMarkupCall {
	call.request.JSON("reply_markup", replyMarkup)
	return call
}

// StopPollCall reprenesents a call to the stopPoll method.
// Use this method to stop a poll which was sent by the bot
// On success, the stopped Poll is returned.
type StopPollCall struct {
	Call[Poll]
}

// NewStopPollCall constructs a new StopPollCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// messageID - Identifier of the original message with the poll
func NewStopPollCall(chatID PeerID, messageID int) *StopPollCall {
	return &StopPollCall{
		Call[Poll]{
			request: NewRequest("stopPoll").
				PeerID("chat_id", chatID).
				Int("message_id", messageID),
		},
	}
}

// StopPollCall constructs a new StopPollCall with required parameters.
func (client *Client) StopPoll(chatID PeerID, messageID int) *StopPollCall {
	return callWithClient(
		client,
		NewStopPollCall(chatID, messageID),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *StopPollCall) ChatID(chatID PeerID) *StopPollCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// MessageID Identifier of the original message with the poll
func (call *StopPollCall) MessageID(messageID int) *StopPollCall {
	call.request.Int("message_id", messageID)
	return call
}

// ReplyMarkup A JSON-serialized object for a new message inline keyboard.
func (call *StopPollCall) ReplyMarkup(replyMarkup InlineKeyboardMarkup) *StopPollCall {
	call.request.JSON("reply_markup", replyMarkup)
	return call
}

// DeleteMessageCall reprenesents a call to the deleteMessage method.
type DeleteMessageCall struct {
	CallNoResult
}

// NewDeleteMessageCall constructs a new DeleteMessageCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// messageID - Identifier of the message to delete
func NewDeleteMessageCall(chatID PeerID, messageID int) *DeleteMessageCall {
	return &DeleteMessageCall{
		CallNoResult{
			request: NewRequest("deleteMessage").
				PeerID("chat_id", chatID).
				Int("message_id", messageID),
		},
	}
}

// DeleteMessageCall constructs a new DeleteMessageCall with required parameters.
func (client *Client) DeleteMessage(chatID PeerID, messageID int) *DeleteMessageCall {
	return callWithClient(
		client,
		NewDeleteMessageCall(chatID, messageID),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *DeleteMessageCall) ChatID(chatID PeerID) *DeleteMessageCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// MessageID Identifier of the message to delete
func (call *DeleteMessageCall) MessageID(messageID int) *DeleteMessageCall {
	call.request.Int("message_id", messageID)
	return call
}

// SendStickerCall reprenesents a call to the sendSticker method.
// Use this method to send static .WEBP, animated .TGS, or video .WEBM stickers
// On success, the sent Message is returned.
type SendStickerCall struct {
	Call[Message]
}

// NewSendStickerCall constructs a new SendStickerCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// sticker - Sticker to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a .WEBP file from the Internet, or upload a new one using multipart/form-data. More information on Sending Files »
func NewSendStickerCall(chatID PeerID, sticker FileArg) *SendStickerCall {
	return &SendStickerCall{
		Call[Message]{
			request: NewRequest("sendSticker").
				PeerID("chat_id", chatID).
				File("sticker", sticker),
		},
	}
}

// SendStickerCall constructs a new SendStickerCall with required parameters.
func (client *Client) SendSticker(chatID PeerID, sticker FileArg) *SendStickerCall {
	return callWithClient(
		client,
		NewSendStickerCall(chatID, sticker),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *SendStickerCall) ChatID(chatID PeerID) *SendStickerCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// Sticker Sticker to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a .WEBP file from the Internet, or upload a new one using multipart/form-data. More information on Sending Files »
func (call *SendStickerCall) Sticker(sticker FileArg) *SendStickerCall {
	call.request.File("sticker", sticker)
	return call
}

// DisableNotification Sends the message silently. Users will receive a notification with no sound.
func (call *SendStickerCall) DisableNotification(disableNotification bool) *SendStickerCall {
	call.request.Bool("disable_notification", disableNotification)
	return call
}

// ProtectContent Protects the contents of the sent message from forwarding and saving
func (call *SendStickerCall) ProtectContent(protectContent bool) *SendStickerCall {
	call.request.Bool("protect_content", protectContent)
	return call
}

// ReplyToMessageID If the message is a reply, ID of the original message
func (call *SendStickerCall) ReplyToMessageID(replyToMessageID int) *SendStickerCall {
	call.request.Int("reply_to_message_id", replyToMessageID)
	return call
}

// AllowSendingWithoutReply Pass True, if the message should be sent even if the specified replied-to message is not found
func (call *SendStickerCall) AllowSendingWithoutReply(allowSendingWithoutReply bool) *SendStickerCall {
	call.request.Bool("allow_sending_without_reply", allowSendingWithoutReply)
	return call
}

// ReplyMarkup Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
func (call *SendStickerCall) ReplyMarkup(replyMarkup ReplyMarkup) *SendStickerCall {
	call.request.JSON("reply_markup", replyMarkup)
	return call
}

// GetStickerSetCall reprenesents a call to the getStickerSet method.
// Use this method to get a sticker set
// On success, a StickerSet object is returned.
type GetStickerSetCall struct {
	Call[StickerSet]
}

// NewGetStickerSetCall constructs a new GetStickerSetCall with required parameters.
// name - Name of the sticker set
func NewGetStickerSetCall(name string) *GetStickerSetCall {
	return &GetStickerSetCall{
		Call[StickerSet]{
			request: NewRequest("getStickerSet").
				String("name", name),
		},
	}
}

// GetStickerSetCall constructs a new GetStickerSetCall with required parameters.
func (client *Client) GetStickerSet(name string) *GetStickerSetCall {
	return callWithClient(
		client,
		NewGetStickerSetCall(name),
	)
}

// Name Name of the sticker set
func (call *GetStickerSetCall) Name(name string) *GetStickerSetCall {
	call.request.String("name", name)
	return call
}

// UploadStickerFileCall reprenesents a call to the uploadStickerFile method.
// Use this method to upload a .PNG file with a sticker for later use in createNewStickerSet and addStickerToSet methods (can be used multiple times)
// Returns the uploaded File on success.
type UploadStickerFileCall struct {
	Call[File]
}

// NewUploadStickerFileCall constructs a new UploadStickerFileCall with required parameters.
// userID - User identifier of sticker file owner
// pngSticker - PNG image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. More information on Sending Files »
func NewUploadStickerFileCall(userID UserID, pngSticker InputFile) *UploadStickerFileCall {
	return &UploadStickerFileCall{
		Call[File]{
			request: NewRequest("uploadStickerFile").
				UserID("user_id", userID).
				JSON("png_sticker", pngSticker),
		},
	}
}

// UploadStickerFileCall constructs a new UploadStickerFileCall with required parameters.
func (client *Client) UploadStickerFile(userID UserID, pngSticker InputFile) *UploadStickerFileCall {
	return callWithClient(
		client,
		NewUploadStickerFileCall(userID, pngSticker),
	)
}

// UserID User identifier of sticker file owner
func (call *UploadStickerFileCall) UserID(userID UserID) *UploadStickerFileCall {
	call.request.UserID("user_id", userID)
	return call
}

// PngSticker PNG image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. More information on Sending Files »
func (call *UploadStickerFileCall) PngSticker(pngSticker InputFile) *UploadStickerFileCall {
	call.request.JSON("png_sticker", pngSticker)
	return call
}

// CreateNewStickerSetCall reprenesents a call to the createNewStickerSet method.
// Use this method to create a new sticker set owned by a user
// The bot will be able to edit the sticker set thus created
// You must use exactly one of the fields png_sticker, tgs_sticker, or webm_sticker
type CreateNewStickerSetCall struct {
	CallNoResult
}

// NewCreateNewStickerSetCall constructs a new CreateNewStickerSetCall with required parameters.
// userID - User identifier of created sticker set owner
// name - Short name of sticker set, to be used in t.me/addstickers/ URLs (e.g., animals). Can contain only English letters, digits and underscores. Must begin with a letter, can't contain consecutive underscores and must end in "_by_<bot_username>". <bot_username> is case insensitive. 1-64 characters.
// title - Sticker set title, 1-64 characters
// emojis - One or more emoji corresponding to the sticker
func NewCreateNewStickerSetCall(userID UserID, name string, title string, emojis string) *CreateNewStickerSetCall {
	return &CreateNewStickerSetCall{
		CallNoResult{
			request: NewRequest("createNewStickerSet").
				UserID("user_id", userID).
				String("name", name).
				String("title", title).
				String("emojis", emojis),
		},
	}
}

// CreateNewStickerSetCall constructs a new CreateNewStickerSetCall with required parameters.
func (client *Client) CreateNewStickerSet(userID UserID, name string, title string, emojis string) *CreateNewStickerSetCall {
	return callWithClient(
		client,
		NewCreateNewStickerSetCall(userID, name, title, emojis),
	)
}

// UserID User identifier of created sticker set owner
func (call *CreateNewStickerSetCall) UserID(userID UserID) *CreateNewStickerSetCall {
	call.request.UserID("user_id", userID)
	return call
}

// Name Short name of sticker set, to be used in t.me/addstickers/ URLs (e.g., animals). Can contain only English letters, digits and underscores. Must begin with a letter, can't contain consecutive underscores and must end in "_by_<bot_username>". <bot_username> is case insensitive. 1-64 characters.
func (call *CreateNewStickerSetCall) Name(name string) *CreateNewStickerSetCall {
	call.request.String("name", name)
	return call
}

// Title Sticker set title, 1-64 characters
func (call *CreateNewStickerSetCall) Title(title string) *CreateNewStickerSetCall {
	call.request.String("title", title)
	return call
}

// PngSticker PNG image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More information on Sending Files »
func (call *CreateNewStickerSetCall) PngSticker(pngSticker FileArg) *CreateNewStickerSetCall {
	call.request.File("png_sticker", pngSticker)
	return call
}

// TgsSticker TGS animation with the sticker, uploaded using multipart/form-data. See https://core.telegram.org/stickers#animated-sticker-requirements for technical requirements
func (call *CreateNewStickerSetCall) TgsSticker(tgsSticker InputFile) *CreateNewStickerSetCall {
	call.request.JSON("tgs_sticker", tgsSticker)
	return call
}

// WebmSticker WEBM video with the sticker, uploaded using multipart/form-data. See https://core.telegram.org/stickers#video-sticker-requirements for technical requirements
func (call *CreateNewStickerSetCall) WebmSticker(webmSticker InputFile) *CreateNewStickerSetCall {
	call.request.JSON("webm_sticker", webmSticker)
	return call
}

// Emojis One or more emoji corresponding to the sticker
func (call *CreateNewStickerSetCall) Emojis(emojis string) *CreateNewStickerSetCall {
	call.request.String("emojis", emojis)
	return call
}

// ContainsMasks Pass True, if a set of mask stickers should be created
func (call *CreateNewStickerSetCall) ContainsMasks(containsMasks bool) *CreateNewStickerSetCall {
	call.request.Bool("contains_masks", containsMasks)
	return call
}

// MaskPosition A JSON-serialized object for position where the mask should be placed on faces
func (call *CreateNewStickerSetCall) MaskPosition(maskPosition MaskPosition) *CreateNewStickerSetCall {
	call.request.JSON("mask_position", maskPosition)
	return call
}

// AddStickerToSetCall reprenesents a call to the addStickerToSet method.
// Use this method to add a new sticker to a set created by the bot
// You must use exactly one of the fields png_sticker, tgs_sticker, or webm_sticker
// Animated stickers can be added to animated sticker sets and only to them
// Animated sticker sets can have up to 50 stickers
// Static sticker sets can have up to 120 stickers
type AddStickerToSetCall struct {
	CallNoResult
}

// NewAddStickerToSetCall constructs a new AddStickerToSetCall with required parameters.
// userID - User identifier of sticker set owner
// name - Sticker set name
// emojis - One or more emoji corresponding to the sticker
func NewAddStickerToSetCall(userID UserID, name string, emojis string) *AddStickerToSetCall {
	return &AddStickerToSetCall{
		CallNoResult{
			request: NewRequest("addStickerToSet").
				UserID("user_id", userID).
				String("name", name).
				String("emojis", emojis),
		},
	}
}

// AddStickerToSetCall constructs a new AddStickerToSetCall with required parameters.
func (client *Client) AddStickerToSet(userID UserID, name string, emojis string) *AddStickerToSetCall {
	return callWithClient(
		client,
		NewAddStickerToSetCall(userID, name, emojis),
	)
}

// UserID User identifier of sticker set owner
func (call *AddStickerToSetCall) UserID(userID UserID) *AddStickerToSetCall {
	call.request.UserID("user_id", userID)
	return call
}

// Name Sticker set name
func (call *AddStickerToSetCall) Name(name string) *AddStickerToSetCall {
	call.request.String("name", name)
	return call
}

// PngSticker PNG image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More information on Sending Files »
func (call *AddStickerToSetCall) PngSticker(pngSticker FileArg) *AddStickerToSetCall {
	call.request.File("png_sticker", pngSticker)
	return call
}

// TgsSticker TGS animation with the sticker, uploaded using multipart/form-data. See https://core.telegram.org/stickers#animated-sticker-requirements for technical requirements
func (call *AddStickerToSetCall) TgsSticker(tgsSticker InputFile) *AddStickerToSetCall {
	call.request.JSON("tgs_sticker", tgsSticker)
	return call
}

// WebmSticker WEBM video with the sticker, uploaded using multipart/form-data. See https://core.telegram.org/stickers#video-sticker-requirements for technical requirements
func (call *AddStickerToSetCall) WebmSticker(webmSticker InputFile) *AddStickerToSetCall {
	call.request.JSON("webm_sticker", webmSticker)
	return call
}

// Emojis One or more emoji corresponding to the sticker
func (call *AddStickerToSetCall) Emojis(emojis string) *AddStickerToSetCall {
	call.request.String("emojis", emojis)
	return call
}

// MaskPosition A JSON-serialized object for position where the mask should be placed on faces
func (call *AddStickerToSetCall) MaskPosition(maskPosition MaskPosition) *AddStickerToSetCall {
	call.request.JSON("mask_position", maskPosition)
	return call
}

// SetStickerPositionInSetCall reprenesents a call to the setStickerPositionInSet method.
// Use this method to move a sticker in a set created by the bot to a specific position
type SetStickerPositionInSetCall struct {
	CallNoResult
}

// NewSetStickerPositionInSetCall constructs a new SetStickerPositionInSetCall with required parameters.
// sticker - File identifier of the sticker
// position - New sticker position in the set, zero-based
func NewSetStickerPositionInSetCall(sticker string, position int) *SetStickerPositionInSetCall {
	return &SetStickerPositionInSetCall{
		CallNoResult{
			request: NewRequest("setStickerPositionInSet").
				String("sticker", sticker).
				Int("position", position),
		},
	}
}

// SetStickerPositionInSetCall constructs a new SetStickerPositionInSetCall with required parameters.
func (client *Client) SetStickerPositionInSet(sticker string, position int) *SetStickerPositionInSetCall {
	return callWithClient(
		client,
		NewSetStickerPositionInSetCall(sticker, position),
	)
}

// Sticker File identifier of the sticker
func (call *SetStickerPositionInSetCall) Sticker(sticker string) *SetStickerPositionInSetCall {
	call.request.String("sticker", sticker)
	return call
}

// Position New sticker position in the set, zero-based
func (call *SetStickerPositionInSetCall) Position(position int) *SetStickerPositionInSetCall {
	call.request.Int("position", position)
	return call
}

// DeleteStickerFromSetCall reprenesents a call to the deleteStickerFromSet method.
// Use this method to delete a sticker from a set created by the bot
type DeleteStickerFromSetCall struct {
	CallNoResult
}

// NewDeleteStickerFromSetCall constructs a new DeleteStickerFromSetCall with required parameters.
// sticker - File identifier of the sticker
func NewDeleteStickerFromSetCall(sticker string) *DeleteStickerFromSetCall {
	return &DeleteStickerFromSetCall{
		CallNoResult{
			request: NewRequest("deleteStickerFromSet").
				String("sticker", sticker),
		},
	}
}

// DeleteStickerFromSetCall constructs a new DeleteStickerFromSetCall with required parameters.
func (client *Client) DeleteStickerFromSet(sticker string) *DeleteStickerFromSetCall {
	return callWithClient(
		client,
		NewDeleteStickerFromSetCall(sticker),
	)
}

// Sticker File identifier of the sticker
func (call *DeleteStickerFromSetCall) Sticker(sticker string) *DeleteStickerFromSetCall {
	call.request.String("sticker", sticker)
	return call
}

// SetStickerSetThumbCall reprenesents a call to the setStickerSetThumb method.
// Use this method to set the thumbnail of a sticker set
// Animated thumbnails can be set for animated sticker sets only
// Video thumbnails can be set only for video sticker sets only
type SetStickerSetThumbCall struct {
	CallNoResult
}

// NewSetStickerSetThumbCall constructs a new SetStickerSetThumbCall with required parameters.
// name - Sticker set name
// userID - User identifier of the sticker set owner
func NewSetStickerSetThumbCall(name string, userID UserID) *SetStickerSetThumbCall {
	return &SetStickerSetThumbCall{
		CallNoResult{
			request: NewRequest("setStickerSetThumb").
				String("name", name).
				UserID("user_id", userID),
		},
	}
}

// SetStickerSetThumbCall constructs a new SetStickerSetThumbCall with required parameters.
func (client *Client) SetStickerSetThumb(name string, userID UserID) *SetStickerSetThumbCall {
	return callWithClient(
		client,
		NewSetStickerSetThumbCall(name, userID),
	)
}

// Name Sticker set name
func (call *SetStickerSetThumbCall) Name(name string) *SetStickerSetThumbCall {
	call.request.String("name", name)
	return call
}

// UserID User identifier of the sticker set owner
func (call *SetStickerSetThumbCall) UserID(userID UserID) *SetStickerSetThumbCall {
	call.request.UserID("user_id", userID)
	return call
}

// Thumb A PNG image with the thumbnail, must be up to 128 kilobytes in size and have width and height exactly 100px, or a TGS animation with the thumbnail up to 32 kilobytes in size; see https://core.telegram.org/stickers#animated-sticker-requirements for animated sticker technical requirements, or a WEBM video with the thumbnail up to 32 kilobytes in size; see https://core.telegram.org/stickers#video-sticker-requirements for video sticker technical requirements. Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More information on Sending Files ». Animated sticker set thumbnails can't be uploaded via HTTP URL.
func (call *SetStickerSetThumbCall) Thumb(thumb FileArg) *SetStickerSetThumbCall {
	call.request.File("thumb", thumb)
	return call
}

// AnswerInlineQueryCall reprenesents a call to the answerInlineQuery method.
// Use this method to send answers to an inline query
// On success, True is returned.No more than 50 results per query are allowed.
type AnswerInlineQueryCall struct {
	CallNoResult
}

// NewAnswerInlineQueryCall constructs a new AnswerInlineQueryCall with required parameters.
// inlineQueryID - Unique identifier for the answered query
// results - A JSON-serialized array of results for the inline query
func NewAnswerInlineQueryCall(inlineQueryID string, results []InlineQueryResult) *AnswerInlineQueryCall {
	return &AnswerInlineQueryCall{
		CallNoResult{
			request: NewRequest("answerInlineQuery").
				String("inline_query_id", inlineQueryID).
				JSON("results", results),
		},
	}
}

// AnswerInlineQueryCall constructs a new AnswerInlineQueryCall with required parameters.
func (client *Client) AnswerInlineQuery(inlineQueryID string, results []InlineQueryResult) *AnswerInlineQueryCall {
	return callWithClient(
		client,
		NewAnswerInlineQueryCall(inlineQueryID, results),
	)
}

// InlineQueryID Unique identifier for the answered query
func (call *AnswerInlineQueryCall) InlineQueryID(inlineQueryID string) *AnswerInlineQueryCall {
	call.request.String("inline_query_id", inlineQueryID)
	return call
}

// Results A JSON-serialized array of results for the inline query
func (call *AnswerInlineQueryCall) Results(results []InlineQueryResult) *AnswerInlineQueryCall {
	call.request.JSON("results", results)
	return call
}

// CacheTime The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.
func (call *AnswerInlineQueryCall) CacheTime(cacheTime int) *AnswerInlineQueryCall {
	call.request.Int("cache_time", cacheTime)
	return call
}

// IsPersonal Pass True, if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query
func (call *AnswerInlineQueryCall) IsPersonal(isPersonal bool) *AnswerInlineQueryCall {
	call.request.Bool("is_personal", isPersonal)
	return call
}

// NextOffset Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes.
func (call *AnswerInlineQueryCall) NextOffset(nextOffset string) *AnswerInlineQueryCall {
	call.request.String("next_offset", nextOffset)
	return call
}

// SwitchPmText If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with the parameter switch_pm_parameter
func (call *AnswerInlineQueryCall) SwitchPmText(switchPmText string) *AnswerInlineQueryCall {
	call.request.String("switch_pm_text", switchPmText)
	return call
}

// SwitchPmParameter Deep-linking parameter for the /start message sent to the bot when user presses the switch button. 1-64 characters, only A-Z, a-z, 0-9, _ and - are allowed.Example: An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a 'Connect your YouTube account' button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an OAuth link. Once done, the bot can offer a switch_inline button so that the user can easily return to the chat where they wanted to use the bot's inline capabilities.
func (call *AnswerInlineQueryCall) SwitchPmParameter(switchPmParameter string) *AnswerInlineQueryCall {
	call.request.String("switch_pm_parameter", switchPmParameter)
	return call
}

// AnswerWebAppQueryCall reprenesents a call to the answerWebAppQuery method.
// Use this method to set the result of an interaction with a Web App and send a corresponding message on behalf of the user to the chat from which the query originated
// On success, a SentWebAppMessage object is returned.
type AnswerWebAppQueryCall struct {
	Call[SentWebAppMessage]
}

// NewAnswerWebAppQueryCall constructs a new AnswerWebAppQueryCall with required parameters.
// webAppQueryID - Unique identifier for the query to be answered
// result - A JSON-serialized object describing the message to be sent
func NewAnswerWebAppQueryCall(webAppQueryID string, result InlineQueryResult) *AnswerWebAppQueryCall {
	return &AnswerWebAppQueryCall{
		Call[SentWebAppMessage]{
			request: NewRequest("answerWebAppQuery").
				String("web_app_query_id", webAppQueryID).
				JSON("result", result),
		},
	}
}

// AnswerWebAppQueryCall constructs a new AnswerWebAppQueryCall with required parameters.
func (client *Client) AnswerWebAppQuery(webAppQueryID string, result InlineQueryResult) *AnswerWebAppQueryCall {
	return callWithClient(
		client,
		NewAnswerWebAppQueryCall(webAppQueryID, result),
	)
}

// WebAppQueryID Unique identifier for the query to be answered
func (call *AnswerWebAppQueryCall) WebAppQueryID(webAppQueryID string) *AnswerWebAppQueryCall {
	call.request.String("web_app_query_id", webAppQueryID)
	return call
}

// Result A JSON-serialized object describing the message to be sent
func (call *AnswerWebAppQueryCall) Result(result InlineQueryResult) *AnswerWebAppQueryCall {
	call.request.JSON("result", result)
	return call
}

// SendInvoiceCall reprenesents a call to the sendInvoice method.
// Use this method to send invoices
// On success, the sent Message is returned.
type SendInvoiceCall struct {
	Call[Message]
}

// NewSendInvoiceCall constructs a new SendInvoiceCall with required parameters.
// chatID - Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// title - Product name, 1-32 characters
// description - Product description, 1-255 characters
// payload - Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.
// providerToken - Payment provider token, obtained via @BotFather
// currency - Three-letter ISO 4217 currency code, see more on currencies
// prices - Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)
func NewSendInvoiceCall(chatID PeerID, title string, description string, payload string, providerToken string, currency string, prices []LabeledPrice) *SendInvoiceCall {
	return &SendInvoiceCall{
		Call[Message]{
			request: NewRequest("sendInvoice").
				PeerID("chat_id", chatID).
				String("title", title).
				String("description", description).
				String("payload", payload).
				String("provider_token", providerToken).
				String("currency", currency).
				JSON("prices", prices),
		},
	}
}

// SendInvoiceCall constructs a new SendInvoiceCall with required parameters.
func (client *Client) SendInvoice(chatID PeerID, title string, description string, payload string, providerToken string, currency string, prices []LabeledPrice) *SendInvoiceCall {
	return callWithClient(
		client,
		NewSendInvoiceCall(chatID, title, description, payload, providerToken, currency, prices),
	)
}

// ChatID Unique identifier for the target chat or username of the target channel (in the format @channelusername)
func (call *SendInvoiceCall) ChatID(chatID PeerID) *SendInvoiceCall {
	call.request.PeerID("chat_id", chatID)
	return call
}

// Title Product name, 1-32 characters
func (call *SendInvoiceCall) Title(title string) *SendInvoiceCall {
	call.request.String("title", title)
	return call
}

// Description Product description, 1-255 characters
func (call *SendInvoiceCall) Description(description string) *SendInvoiceCall {
	call.request.String("description", description)
	return call
}

// Payload Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.
func (call *SendInvoiceCall) Payload(payload string) *SendInvoiceCall {
	call.request.String("payload", payload)
	return call
}

// ProviderToken Payment provider token, obtained via @BotFather
func (call *SendInvoiceCall) ProviderToken(providerToken string) *SendInvoiceCall {
	call.request.String("provider_token", providerToken)
	return call
}

// Currency Three-letter ISO 4217 currency code, see more on currencies
func (call *SendInvoiceCall) Currency(currency string) *SendInvoiceCall {
	call.request.String("currency", currency)
	return call
}

// Prices Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)
func (call *SendInvoiceCall) Prices(prices []LabeledPrice) *SendInvoiceCall {
	call.request.JSON("prices", prices)
	return call
}

// MaxTipAmount The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double). For example, for a maximum tip of US$ 1.45 pass max_tip_amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0
func (call *SendInvoiceCall) MaxTipAmount(maxTipAmount int) *SendInvoiceCall {
	call.request.Int("max_tip_amount", maxTipAmount)
	return call
}

// SuggestedTipAmounts A JSON-serialized array of suggested amounts of tips in the smallest units of the currency (integer, not float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed max_tip_amount.
func (call *SendInvoiceCall) SuggestedTipAmounts(suggestedTipAmounts []int) *SendInvoiceCall {
	call.request.JSON("suggested_tip_amounts", suggestedTipAmounts)
	return call
}

// StartParameter Unique deep-linking parameter. If left empty, forwarded copies of the sent message will have a Pay button, allowing multiple users to pay directly from the forwarded message, using the same invoice. If non-empty, forwarded copies of the sent message will have a URL button with a deep link to the bot (instead of a Pay button), with the value used as the start parameter
func (call *SendInvoiceCall) StartParameter(startParameter string) *SendInvoiceCall {
	call.request.String("start_parameter", startParameter)
	return call
}

// ProviderData JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
func (call *SendInvoiceCall) ProviderData(providerData string) *SendInvoiceCall {
	call.request.String("provider_data", providerData)
	return call
}

// PhotoURL URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.
func (call *SendInvoiceCall) PhotoURL(photoURL string) *SendInvoiceCall {
	call.request.String("photo_url", photoURL)
	return call
}

// PhotoSize Photo size in bytes
func (call *SendInvoiceCall) PhotoSize(photoSize int) *SendInvoiceCall {
	call.request.Int("photo_size", photoSize)
	return call
}

// PhotoWidth Photo width
func (call *SendInvoiceCall) PhotoWidth(photoWidth int) *SendInvoiceCall {
	call.request.Int("photo_width", photoWidth)
	return call
}

// PhotoHeight Photo height
func (call *SendInvoiceCall) PhotoHeight(photoHeight int) *SendInvoiceCall {
	call.request.Int("photo_height", photoHeight)
	return call
}

// NeedName Pass True, if you require the user's full name to complete the order
func (call *SendInvoiceCall) NeedName(needName bool) *SendInvoiceCall {
	call.request.Bool("need_name", needName)
	return call
}

// NeedPhoneNumber Pass True, if you require the user's phone number to complete the order
func (call *SendInvoiceCall) NeedPhoneNumber(needPhoneNumber bool) *SendInvoiceCall {
	call.request.Bool("need_phone_number", needPhoneNumber)
	return call
}

// NeedEmail Pass True, if you require the user's email address to complete the order
func (call *SendInvoiceCall) NeedEmail(needEmail bool) *SendInvoiceCall {
	call.request.Bool("need_email", needEmail)
	return call
}

// NeedShippingAddress Pass True, if you require the user's shipping address to complete the order
func (call *SendInvoiceCall) NeedShippingAddress(needShippingAddress bool) *SendInvoiceCall {
	call.request.Bool("need_shipping_address", needShippingAddress)
	return call
}

// SendPhoneNumberToProvider Pass True, if the user's phone number should be sent to provider
func (call *SendInvoiceCall) SendPhoneNumberToProvider(sendPhoneNumberToProvider bool) *SendInvoiceCall {
	call.request.Bool("send_phone_number_to_provider", sendPhoneNumberToProvider)
	return call
}

// SendEmailToProvider Pass True, if the user's email address should be sent to provider
func (call *SendInvoiceCall) SendEmailToProvider(sendEmailToProvider bool) *SendInvoiceCall {
	call.request.Bool("send_email_to_provider", sendEmailToProvider)
	return call
}

// IsFlexible Pass True, if the final price depends on the shipping method
func (call *SendInvoiceCall) IsFlexible(isFlexible bool) *SendInvoiceCall {
	call.request.Bool("is_flexible", isFlexible)
	return call
}

// DisableNotification Sends the message silently. Users will receive a notification with no sound.
func (call *SendInvoiceCall) DisableNotification(disableNotification bool) *SendInvoiceCall {
	call.request.Bool("disable_notification", disableNotification)
	return call
}

// ProtectContent Protects the contents of the sent message from forwarding and saving
func (call *SendInvoiceCall) ProtectContent(protectContent bool) *SendInvoiceCall {
	call.request.Bool("protect_content", protectContent)
	return call
}

// ReplyToMessageID If the message is a reply, ID of the original message
func (call *SendInvoiceCall) ReplyToMessageID(replyToMessageID int) *SendInvoiceCall {
	call.request.Int("reply_to_message_id", replyToMessageID)
	return call
}

// AllowSendingWithoutReply Pass True, if the message should be sent even if the specified replied-to message is not found
func (call *SendInvoiceCall) AllowSendingWithoutReply(allowSendingWithoutReply bool) *SendInvoiceCall {
	call.request.Bool("allow_sending_without_reply", allowSendingWithoutReply)
	return call
}

// ReplyMarkup A JSON-serialized object for an inline keyboard. If empty, one 'Pay total price' button will be shown. If not empty, the first button must be a Pay button.
func (call *SendInvoiceCall) ReplyMarkup(replyMarkup InlineKeyboardMarkup) *SendInvoiceCall {
	call.request.JSON("reply_markup", replyMarkup)
	return call
}

// CreateInvoiceLinkCall reprenesents a call to the createInvoiceLink method.
// Use this method to create a link for an invoice
// Returns the created invoice link as String on success.
type CreateInvoiceLinkCall struct {
	Call[string]
}

// NewCreateInvoiceLinkCall constructs a new CreateInvoiceLinkCall with required parameters.
// title - Product name, 1-32 characters
// description - Product description, 1-255 characters
// payload - Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.
// providerToken - Payment provider token, obtained via BotFather
// currency - Three-letter ISO 4217 currency code, see more on currencies
// prices - Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)
func NewCreateInvoiceLinkCall(title string, description string, payload string, providerToken string, currency string, prices []LabeledPrice) *CreateInvoiceLinkCall {
	return &CreateInvoiceLinkCall{
		Call[string]{
			request: NewRequest("createInvoiceLink").
				String("title", title).
				String("description", description).
				String("payload", payload).
				String("provider_token", providerToken).
				String("currency", currency).
				JSON("prices", prices),
		},
	}
}

// CreateInvoiceLinkCall constructs a new CreateInvoiceLinkCall with required parameters.
func (client *Client) CreateInvoiceLink(title string, description string, payload string, providerToken string, currency string, prices []LabeledPrice) *CreateInvoiceLinkCall {
	return callWithClient(
		client,
		NewCreateInvoiceLinkCall(title, description, payload, providerToken, currency, prices),
	)
}

// Title Product name, 1-32 characters
func (call *CreateInvoiceLinkCall) Title(title string) *CreateInvoiceLinkCall {
	call.request.String("title", title)
	return call
}

// Description Product description, 1-255 characters
func (call *CreateInvoiceLinkCall) Description(description string) *CreateInvoiceLinkCall {
	call.request.String("description", description)
	return call
}

// Payload Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.
func (call *CreateInvoiceLinkCall) Payload(payload string) *CreateInvoiceLinkCall {
	call.request.String("payload", payload)
	return call
}

// ProviderToken Payment provider token, obtained via BotFather
func (call *CreateInvoiceLinkCall) ProviderToken(providerToken string) *CreateInvoiceLinkCall {
	call.request.String("provider_token", providerToken)
	return call
}

// Currency Three-letter ISO 4217 currency code, see more on currencies
func (call *CreateInvoiceLinkCall) Currency(currency string) *CreateInvoiceLinkCall {
	call.request.String("currency", currency)
	return call
}

// Prices Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)
func (call *CreateInvoiceLinkCall) Prices(prices []LabeledPrice) *CreateInvoiceLinkCall {
	call.request.JSON("prices", prices)
	return call
}

// MaxTipAmount The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double). For example, for a maximum tip of US$ 1.45 pass max_tip_amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0
func (call *CreateInvoiceLinkCall) MaxTipAmount(maxTipAmount int) *CreateInvoiceLinkCall {
	call.request.Int("max_tip_amount", maxTipAmount)
	return call
}

// SuggestedTipAmounts A JSON-serialized array of suggested amounts of tips in the smallest units of the currency (integer, not float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed max_tip_amount.
func (call *CreateInvoiceLinkCall) SuggestedTipAmounts(suggestedTipAmounts []int) *CreateInvoiceLinkCall {
	call.request.JSON("suggested_tip_amounts", suggestedTipAmounts)
	return call
}

// ProviderData JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
func (call *CreateInvoiceLinkCall) ProviderData(providerData string) *CreateInvoiceLinkCall {
	call.request.String("provider_data", providerData)
	return call
}

// PhotoURL URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service.
func (call *CreateInvoiceLinkCall) PhotoURL(photoURL string) *CreateInvoiceLinkCall {
	call.request.String("photo_url", photoURL)
	return call
}

// PhotoSize Photo size in bytes
func (call *CreateInvoiceLinkCall) PhotoSize(photoSize int) *CreateInvoiceLinkCall {
	call.request.Int("photo_size", photoSize)
	return call
}

// PhotoWidth Photo width
func (call *CreateInvoiceLinkCall) PhotoWidth(photoWidth int) *CreateInvoiceLinkCall {
	call.request.Int("photo_width", photoWidth)
	return call
}

// PhotoHeight Photo height
func (call *CreateInvoiceLinkCall) PhotoHeight(photoHeight int) *CreateInvoiceLinkCall {
	call.request.Int("photo_height", photoHeight)
	return call
}

// NeedName Pass True, if you require the user's full name to complete the order
func (call *CreateInvoiceLinkCall) NeedName(needName bool) *CreateInvoiceLinkCall {
	call.request.Bool("need_name", needName)
	return call
}

// NeedPhoneNumber Pass True, if you require the user's phone number to complete the order
func (call *CreateInvoiceLinkCall) NeedPhoneNumber(needPhoneNumber bool) *CreateInvoiceLinkCall {
	call.request.Bool("need_phone_number", needPhoneNumber)
	return call
}

// NeedEmail Pass True, if you require the user's email address to complete the order
func (call *CreateInvoiceLinkCall) NeedEmail(needEmail bool) *CreateInvoiceLinkCall {
	call.request.Bool("need_email", needEmail)
	return call
}

// NeedShippingAddress Pass True, if you require the user's shipping address to complete the order
func (call *CreateInvoiceLinkCall) NeedShippingAddress(needShippingAddress bool) *CreateInvoiceLinkCall {
	call.request.Bool("need_shipping_address", needShippingAddress)
	return call
}

// SendPhoneNumberToProvider Pass True, if the user's phone number should be sent to the provider
func (call *CreateInvoiceLinkCall) SendPhoneNumberToProvider(sendPhoneNumberToProvider bool) *CreateInvoiceLinkCall {
	call.request.Bool("send_phone_number_to_provider", sendPhoneNumberToProvider)
	return call
}

// SendEmailToProvider Pass True, if the user's email address should be sent to the provider
func (call *CreateInvoiceLinkCall) SendEmailToProvider(sendEmailToProvider bool) *CreateInvoiceLinkCall {
	call.request.Bool("send_email_to_provider", sendEmailToProvider)
	return call
}

// IsFlexible Pass True, if the final price depends on the shipping method
func (call *CreateInvoiceLinkCall) IsFlexible(isFlexible bool) *CreateInvoiceLinkCall {
	call.request.Bool("is_flexible", isFlexible)
	return call
}

// AnswerShippingQueryCall reprenesents a call to the answerShippingQuery method.
// If you sent an invoice requesting a shipping address and the parameter is_flexible was specified, the Bot API will send an Update with a shipping_query field to the bot
// Use this method to reply to shipping queries
// On success, True is returned.
type AnswerShippingQueryCall struct {
	CallNoResult
}

// NewAnswerShippingQueryCall constructs a new AnswerShippingQueryCall with required parameters.
// shippingQueryID - Unique identifier for the query to be answered
// ok - Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)
func NewAnswerShippingQueryCall(shippingQueryID string, ok bool) *AnswerShippingQueryCall {
	return &AnswerShippingQueryCall{
		CallNoResult{
			request: NewRequest("answerShippingQuery").
				String("shipping_query_id", shippingQueryID).
				Bool("ok", ok),
		},
	}
}

// AnswerShippingQueryCall constructs a new AnswerShippingQueryCall with required parameters.
func (client *Client) AnswerShippingQuery(shippingQueryID string, ok bool) *AnswerShippingQueryCall {
	return callWithClient(
		client,
		NewAnswerShippingQueryCall(shippingQueryID, ok),
	)
}

// ShippingQueryID Unique identifier for the query to be answered
func (call *AnswerShippingQueryCall) ShippingQueryID(shippingQueryID string) *AnswerShippingQueryCall {
	call.request.String("shipping_query_id", shippingQueryID)
	return call
}

// Ok Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)
func (call *AnswerShippingQueryCall) Ok(ok bool) *AnswerShippingQueryCall {
	call.request.Bool("ok", ok)
	return call
}

// ShippingOptions Required if ok is True. A JSON-serialized array of available shipping options.
func (call *AnswerShippingQueryCall) ShippingOptions(shippingOptions []ShippingOption) *AnswerShippingQueryCall {
	call.request.JSON("shipping_options", shippingOptions)
	return call
}

// ErrorMessage Required if ok is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. "Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.
func (call *AnswerShippingQueryCall) ErrorMessage(errorMessage string) *AnswerShippingQueryCall {
	call.request.String("error_message", errorMessage)
	return call
}

// AnswerPreCheckoutQueryCall reprenesents a call to the answerPreCheckoutQuery method.
// Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an Update with the field pre_checkout_query
// Use this method to respond to such pre-checkout queries
// On success, True is returned
// Note: The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.
type AnswerPreCheckoutQueryCall struct {
	CallNoResult
}

// NewAnswerPreCheckoutQueryCall constructs a new AnswerPreCheckoutQueryCall with required parameters.
// preCheckoutQueryID - Unique identifier for the query to be answered
// ok - Specify True if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use False if there are any problems.
func NewAnswerPreCheckoutQueryCall(preCheckoutQueryID string, ok bool) *AnswerPreCheckoutQueryCall {
	return &AnswerPreCheckoutQueryCall{
		CallNoResult{
			request: NewRequest("answerPreCheckoutQuery").
				String("pre_checkout_query_id", preCheckoutQueryID).
				Bool("ok", ok),
		},
	}
}

// AnswerPreCheckoutQueryCall constructs a new AnswerPreCheckoutQueryCall with required parameters.
func (client *Client) AnswerPreCheckoutQuery(preCheckoutQueryID string, ok bool) *AnswerPreCheckoutQueryCall {
	return callWithClient(
		client,
		NewAnswerPreCheckoutQueryCall(preCheckoutQueryID, ok),
	)
}

// PreCheckoutQueryID Unique identifier for the query to be answered
func (call *AnswerPreCheckoutQueryCall) PreCheckoutQueryID(preCheckoutQueryID string) *AnswerPreCheckoutQueryCall {
	call.request.String("pre_checkout_query_id", preCheckoutQueryID)
	return call
}

// Ok Specify True if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use False if there are any problems.
func (call *AnswerPreCheckoutQueryCall) Ok(ok bool) *AnswerPreCheckoutQueryCall {
	call.request.Bool("ok", ok)
	return call
}

// ErrorMessage Required if ok is False. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. "Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!"). Telegram will display this message to the user.
func (call *AnswerPreCheckoutQueryCall) ErrorMessage(errorMessage string) *AnswerPreCheckoutQueryCall {
	call.request.String("error_message", errorMessage)
	return call
}

// SetPassportDataErrorsCall reprenesents a call to the setPassportDataErrors method.
// Informs a user that some of the Telegram Passport elements they provided contains errors
// The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change)
// Use this if the data submitted by the user doesn't satisfy the standards your service requires for any reason
// For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc
// Supply some details in the error message to make sure the user knows how to correct the issues.
type SetPassportDataErrorsCall struct {
	CallNoResult
}

// NewSetPassportDataErrorsCall constructs a new SetPassportDataErrorsCall with required parameters.
// userID - User identifier
// errors - A JSON-serialized array describing the errors
func NewSetPassportDataErrorsCall(userID UserID, errors []PassportElementError) *SetPassportDataErrorsCall {
	return &SetPassportDataErrorsCall{
		CallNoResult{
			request: NewRequest("setPassportDataErrors").
				UserID("user_id", userID).
				JSON("errors", errors),
		},
	}
}

// SetPassportDataErrorsCall constructs a new SetPassportDataErrorsCall with required parameters.
func (client *Client) SetPassportDataErrors(userID UserID, errors []PassportElementError) *SetPassportDataErrorsCall {
	return callWithClient(
		client,
		NewSetPassportDataErrorsCall(userID, errors),
	)
}

// UserID User identifier
func (call *SetPassportDataErrorsCall) UserID(userID UserID) *SetPassportDataErrorsCall {
	call.request.UserID("user_id", userID)
	return call
}

// Errors A JSON-serialized array describing the errors
func (call *SetPassportDataErrorsCall) Errors(errors []PassportElementError) *SetPassportDataErrorsCall {
	call.request.JSON("errors", errors)
	return call
}

// SendGameCall reprenesents a call to the sendGame method.
// Use this method to send a game
// On success, the sent Message is returned.
type SendGameCall struct {
	Call[Message]
}

// NewSendGameCall constructs a new SendGameCall with required parameters.
// chatID - Unique identifier for the target chat
// gameShortName - Short name of the game, serves as the unique identifier for the game. Set up your games via @BotFather.
func NewSendGameCall(chatID ChatID, gameShortName string) *SendGameCall {
	return &SendGameCall{
		Call[Message]{
			request: NewRequest("sendGame").
				ChatID("chat_id", chatID).
				String("game_short_name", gameShortName),
		},
	}
}

// SendGameCall constructs a new SendGameCall with required parameters.
func (client *Client) SendGame(chatID ChatID, gameShortName string) *SendGameCall {
	return callWithClient(
		client,
		NewSendGameCall(chatID, gameShortName),
	)
}

// ChatID Unique identifier for the target chat
func (call *SendGameCall) ChatID(chatID ChatID) *SendGameCall {
	call.request.ChatID("chat_id", chatID)
	return call
}

// GameShortName Short name of the game, serves as the unique identifier for the game. Set up your games via @BotFather.
func (call *SendGameCall) GameShortName(gameShortName string) *SendGameCall {
	call.request.String("game_short_name", gameShortName)
	return call
}

// DisableNotification Sends the message silently. Users will receive a notification with no sound.
func (call *SendGameCall) DisableNotification(disableNotification bool) *SendGameCall {
	call.request.Bool("disable_notification", disableNotification)
	return call
}

// ProtectContent Protects the contents of the sent message from forwarding and saving
func (call *SendGameCall) ProtectContent(protectContent bool) *SendGameCall {
	call.request.Bool("protect_content", protectContent)
	return call
}

// ReplyToMessageID If the message is a reply, ID of the original message
func (call *SendGameCall) ReplyToMessageID(replyToMessageID int) *SendGameCall {
	call.request.Int("reply_to_message_id", replyToMessageID)
	return call
}

// AllowSendingWithoutReply Pass True, if the message should be sent even if the specified replied-to message is not found
func (call *SendGameCall) AllowSendingWithoutReply(allowSendingWithoutReply bool) *SendGameCall {
	call.request.Bool("allow_sending_without_reply", allowSendingWithoutReply)
	return call
}

// ReplyMarkup A JSON-serialized object for an inline keyboard. If empty, one 'Play game_title' button will be shown. If not empty, the first button must launch the game.
func (call *SendGameCall) ReplyMarkup(replyMarkup InlineKeyboardMarkup) *SendGameCall {
	call.request.JSON("reply_markup", replyMarkup)
	return call
}

// SetGameScoreCall reprenesents a call to the setGameScore method.
// Use this method to set the score of the specified user in a game message
// On success, if the message is not an inline message, the Message is returned, otherwise True is returned
// Returns an error, if the new score is not greater than the user's current score in the chat and force is False.
type SetGameScoreCall struct {
	Call[Message]
}

// NewSetGameScoreCall constructs a new SetGameScoreCall with required parameters.
// userID - User identifier
// score - New score, must be non-negative
func NewSetGameScoreCall(userID UserID, score int) *SetGameScoreCall {
	return &SetGameScoreCall{
		Call[Message]{
			request: NewRequest("setGameScore").
				UserID("user_id", userID).
				Int("score", score),
		},
	}
}

// SetGameScoreCall constructs a new SetGameScoreCall with required parameters.
func (client *Client) SetGameScore(userID UserID, score int) *SetGameScoreCall {
	return callWithClient(
		client,
		NewSetGameScoreCall(userID, score),
	)
}

// UserID User identifier
func (call *SetGameScoreCall) UserID(userID UserID) *SetGameScoreCall {
	call.request.UserID("user_id", userID)
	return call
}

// Score New score, must be non-negative
func (call *SetGameScoreCall) Score(score int) *SetGameScoreCall {
	call.request.Int("score", score)
	return call
}

// Force Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
func (call *SetGameScoreCall) Force(force bool) *SetGameScoreCall {
	call.request.Bool("force", force)
	return call
}

// DisableEditMessage Pass True, if the game message should not be automatically edited to include the current scoreboard
func (call *SetGameScoreCall) DisableEditMessage(disableEditMessage bool) *SetGameScoreCall {
	call.request.Bool("disable_edit_message", disableEditMessage)
	return call
}

// ChatID Required if inline_message_id is not specified. Unique identifier for the target chat
func (call *SetGameScoreCall) ChatID(chatID ChatID) *SetGameScoreCall {
	call.request.ChatID("chat_id", chatID)
	return call
}

// MessageID Required if inline_message_id is not specified. Identifier of the sent message
func (call *SetGameScoreCall) MessageID(messageID int) *SetGameScoreCall {
	call.request.Int("message_id", messageID)
	return call
}

// InlineMessageID Required if chat_id and message_id are not specified. Identifier of the inline message
func (call *SetGameScoreCall) InlineMessageID(inlineMessageID string) *SetGameScoreCall {
	call.request.String("inline_message_id", inlineMessageID)
	return call
}

// GetGameHighScoresCall reprenesents a call to the getGameHighScores method.
// Use this method to get data for high score tables
// Will return the score of the specified user and several of their neighbors in a game
// On success, returns an Array of GameHighScore objects.
// This method will currently return scores for the target user, plus two of their closest neighbors on each side
// Will also return the top three users if the user and their neighbors are not among them
// Please note that this behavior is subject to change.
type GetGameHighScoresCall struct {
	Call[GameHighScore]
}

// NewGetGameHighScoresCall constructs a new GetGameHighScoresCall with required parameters.
// userID - Target user id
func NewGetGameHighScoresCall(userID UserID) *GetGameHighScoresCall {
	return &GetGameHighScoresCall{
		Call[GameHighScore]{
			request: NewRequest("getGameHighScores").
				UserID("user_id", userID),
		},
	}
}

// GetGameHighScoresCall constructs a new GetGameHighScoresCall with required parameters.
func (client *Client) GetGameHighScores(userID UserID) *GetGameHighScoresCall {
	return callWithClient(
		client,
		NewGetGameHighScoresCall(userID),
	)
}

// UserID Target user id
func (call *GetGameHighScoresCall) UserID(userID UserID) *GetGameHighScoresCall {
	call.request.UserID("user_id", userID)
	return call
}

// ChatID Required if inline_message_id is not specified. Unique identifier for the target chat
func (call *GetGameHighScoresCall) ChatID(chatID ChatID) *GetGameHighScoresCall {
	call.request.ChatID("chat_id", chatID)
	return call
}

// MessageID Required if inline_message_id is not specified. Identifier of the sent message
func (call *GetGameHighScoresCall) MessageID(messageID int) *GetGameHighScoresCall {
	call.request.Int("message_id", messageID)
	return call
}

// InlineMessageID Required if chat_id and message_id are not specified. Identifier of the inline message
func (call *GetGameHighScoresCall) InlineMessageID(inlineMessageID string) *GetGameHighScoresCall {
	call.request.String("inline_message_id", inlineMessageID)
	return call
}
